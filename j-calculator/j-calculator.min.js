"use strict";

function generateGUID() {
  do {
    var e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
      var n = 16 * Math.random() | 0,
          t = "x" == e ? n : 3 & n | 8;
      return t.toString(16);
    });
  } while (GUIDList.indexOf(e) > -1);

  return e;
}

function toFunc(e) {
  if ("function" == typeof e) return e;

  if ("string" == typeof e) {
    if (void 0 != window[e] && "function" == typeof window[e]) return window[e];

    try {
      return new Function(e);
    } catch (n) {}
  }

  return function () {
    return e;
  };
}

function Obj() {
  this._parent = null, this._handlers = [], this._onceHandlers = [], this._elements = $(), this.guid = generateGUID(), this.on = function (e, n) {
    "function" == typeof e && void 0 === n && (n = e, e = "all"), e = e.toLowerCase().split(" ");

    for (var t = 0; t < e.length; t++) {
      this._handlers.push({
        event: e[t],
        handler: n
      });
    }

    return this;
  }, this.once = function (e, n) {
    "function" == typeof e && void 0 === n && (n = e, e = "all"), e = e.toLowerCase().split(" ");

    for (var t = 0; t < e.length; t++) {
      this._onceHandlers.push({
        event: e[t],
        handler: n
      });
    }

    return this;
  }, this.off = function (e, n) {
    if (void 0 === n && "function" == typeof e) for (var n = e, t = 0; t < this._handlers.length; t++) {
      this._handlers[t].handler == n && this._handlers.splice(t--, 1);
    } else if (void 0 === n && "string" == typeof e) {
      e = e.toLowerCase().split(" ");

      for (var t = 0; t < this._handlers.length; t++) {
        e.indexOf(this._handlers[t].event) > -1 && this._handlers.splice(t--, 1);
      }
    } else {
      e = e.toLowerCase().split(" ");

      for (var t = 0; t < this._handlers.length; t++) {
        e.indexOf(this._handlers[t].event) > -1 && this._handlers[t].handler == n && this._handlers.splice(t--, 1);
      }
    }
    return this;
  }, this.offOnce = function (e, n) {
    if (void 0 === n && "function" == typeof e) for (var n = e, t = 0; t < this._onceHandlers.length; t++) {
      this._onceHandlers[t].handler == n && this._onceHandlers.splice(t--, 1);
    } else if (void 0 === n && "string" == typeof e) {
      e = e.toLowerCase().split(" ");

      for (var t = 0; t < this._onceHandlers.length; t++) {
        e.indexOf(this._onceHandlers[t].event) > -1 && this._onceHandlers.splice(t--, 1);
      }
    } else {
      e = e.toLowerCase().split(" ");

      for (var t = 0; t < this._onceHandlers.length; t++) {
        e.indexOf(this._onceHandlers[t].event) > -1 && this._onceHandlers[t].handler == n && this._onceHandlers.splice(t--, 1);
      }
    }
    return this;
  }, this.trigger = function (e, n) {
    e = e.toLowerCase().split(" ");

    for (var t = 0; t < this._handlers.length; t++) {
      (e.indexOf(this._handlers[t].event) > -1 || "all" == this._handlers[t].event) && toFunc(this._handlers[t].handler).call(this, this._handlers[t].event, n);
    }

    for (var t = 0; t < this._onceHandlers.length; t++) {
      (e.indexOf(this._onceHandlers[t].event) > -1 || "all" == this._handlers[t].event) && (toFunc(this._onceHandlers[t].handler).call(this, this._onceHandlers[t].event, n), this._onceHandlers.splice(t--, 1));
    }

    return this;
  }, this.renderer = function () {
    return $("<div class='Obj'></div>");
  }, this.refresher = function (e) {
    return this.renderer.apply(this);
  }, this.destroyer = function (e) {}, this.render = function (e, n) {
    var t = this;
    if (void 0 === e) var e = "body";
    if (void 0 === n) var n = "replace";else n = n.toLowerCase();
    var i = [].slice.call(arguments, 2),
        r = this;
    return $(e).each(function (e, s) {
      s = $(s);
      var h = $(t.renderer.apply(t, i));
      h.attr("guid", t.guid), t._elements = t._elements.add(h), "append" == n ? s.append(h) : "prepend" == n ? s.prepend(h) : "after" == n ? s.after(h) : "before" == n ? s.before(h) : "return" == n ? r = h : "none" == n || (s.after(h), s.remove());
    }), this.trigger("render"), r;
  }, this.refresh = function () {
    for (var e = $(), n = 0; n < this._elements.length; n++) {
      var t = this._elements.eq(n),
          i = this.refresher.call(this, t);

      i ? (i.attr("guid", this.guid), this._elements = this._elements.not(t), t.after(i), t.remove(), e = e.add(i)) : e = e.add(t);
    }

    return this._elements = e, this;
  }, this.destroy = function () {
    var e = this;
    return this._elements.each(function (n, t) {
      var i = $(t);
      e.destroyer.call(e, i);
    }), this._elements.remove(), this._elements = $(), delete Objs[this.guid], this;
  }, Objs[this.guid] = this;
}

var GUIDList = [],
    Objs = {};
window.jdata = window.jdata || {};
window.jdata.countries = {
  "GD": ["Grenada"],
  "GE": ["Georgia"],
  "GF": ["French Guiana"],
  "GA": ["Gabon"],
  "GB": ["the United Kingdom", "UK"],
  "FK": ["Falkland Islands (Malvinas)"],
  "FJ": ["Fiji"],
  "FM": ["Micronesia"],
  "FI": ["Finland"],
  "FR": ["France"],
  "FO": ["Faroe Islands"],
  "GY": ["Guyana"],
  "GW": ["Guinea-Bissau"],
  "WS": ["Samoa"],
  "GN": ["Guinea"],
  "GM": ["Gambia"],
  "GL": ["Greenland"],
  "GI": ["Gibraltar"],
  "GH": ["Ghana"],
  "GG": ["Guernsey"],
  "GU": ["Guam"],
  "GT": ["Guatemala"],
  "GS": ["South Georgia and the South Sandwich Islands"],
  "GR": ["Greece"],
  "GQ": ["Equatorial Guinea"],
  "WF": ["Wallis and Futuna"],
  "GP": ["Guadeloupe"],
  "VI": ["Virgin Islands"],
  "DZ": ["Algeria"],
  "VG": ["Virgin Islands"],
  "VU": ["Vanuatu"],
  "VN": ["Vietnam"],
  "EC": ["Ecuador"],
  "DE": ["Germany"],
  "UZ": ["Uzbekistan"],
  "UY": ["Uruguay"],
  "DK": ["Denmark"],
  "DJ": ["Djibouti"],
  "VE": ["Venezuela"],
  "DM": ["Dominica"],
  "VC": ["Saint Vincent and the Grenadines"],
  "DO": ["Dominican Republic"],
  "VA": ["Holy See (Vatican City State)"],
  "EU": ["Europe"],
  "UG": ["Uganda"],
  "US": ["the USA", "North America"],
  "UM": ["United States Minor Outlying Islands"],
  "EH": ["Western Sahara"],
  "EG": ["Egypt"],
  "TZ": ["Tanzania"],
  "EE": ["Estonia"],
  "TT": ["Trinidad and Tobago"],
  "TW": ["Taiwan"],
  "TV": ["Tuvalu"],
  "UA": ["Ukraine"],
  "ET": ["Ethiopia"],
  "ES": ["Spain"],
  "ER": ["Eritrea"],
  "TO": ["Tonga"],
  "TN": ["Tunisia"],
  "TM": ["Turkmenistan"],
  "TL": ["Timor-Leste"],
  "CA": ["Canada"],
  "TR": ["Turkey"],
  "BZ": ["Belize"],
  "TG": ["Togo"],
  "BW": ["Botswana"],
  "TF": ["French Southern Territories"],
  "BV": ["Bouvet Island"],
  "BY": ["Belarus"],
  "TD": ["Chad"],
  "TK": ["Tokelau"],
  "BS": ["Bahamas"],
  "TJ": ["Tajikistan"],
  "BR": ["Brazil"],
  "TH": ["Thailand"],
  "BT": ["Bhutan"],
  "BN": ["Brunei Darussalam"],
  "BO": ["Bolivia"],
  "BQ": ["Bonaire"],
  "BJ": ["Benin"],
  "TC": ["Turks and Caicos Islands"],
  "BL": ["Saint Bartelemey"],
  "BM": ["Bermuda"],
  "BF": ["Burkina Faso"],
  "SV": ["El Salvador"],
  "BG": ["Bulgaria"],
  "SS": ["South Sudan"],
  "BH": ["Bahrain"],
  "ST": ["Sao Tome and Principe"],
  "BI": ["Burundi"],
  "SY": ["Syrian Arab Republic"],
  "BB": ["Barbados"],
  "SZ": ["Swaziland"],
  "BD": ["Bangladesh"],
  "SX": ["Sint Maarten"],
  "BE": ["Belgium"],
  "SL": ["Sierra Leone"],
  "SK": ["Slovakia"],
  "SN": ["Senegal"],
  "SM": ["San Marino"],
  "SO": ["Somalia"],
  "SR": ["Suriname"],
  "SD": ["Sudan"],
  "CZ": ["Czech Republic"],
  "SC": ["Seychelles"],
  "CY": ["Cyprus"],
  "CX": ["Christmas Island"],
  "SE": ["Sweden"],
  "CW": ["Curacao"],
  "SH": ["Saint Helena"],
  "CV": ["Cape Verde"],
  "SG": ["Singapore"],
  "CU": ["Cuba"],
  "SJ": ["Svalbard and Jan Mayen"],
  "SI": ["Slovenia"],
  "CR": ["Costa Rica"],
  "CO": ["Colombia"],
  "CM": ["Cameroon"],
  "CN": ["China"],
  "SA": ["Saudi Arabia"],
  "CK": ["Cook Islands"],
  "SB": ["Solomon Islands"],
  "CL": ["Chile"],
  "CI": ["Cote d'Ivoire"],
  "RS": ["Serbia"],
  "CG": ["Congo"],
  "RU": ["Russian Federation"],
  "CH": ["Switzerland"],
  "RW": ["Rwanda"],
  "CF": ["Central African Republic"],
  "CC": ["Cocos (Keeling) Islands"],
  "CD": ["Congo"],
  "RO": ["Romania"],
  "RE": ["Reunion"],
  "AZ": ["Azerbaijan"],
  "BA": ["Bosnia and Herzegovina"],
  "AT": ["Austria"],
  "AS": ["American Samoa"],
  "AR": ["Argentina"],
  "AQ": ["Antarctica"],
  "AX": ["Aland Islands"],
  "AW": ["Aruba"],
  "QA": ["Qatar"],
  "AU": ["Australia"],
  "AL": ["Albania"],
  "AI": ["Anguilla"],
  "AO": ["Angola"],
  "AP": ["Asia/Pacific Region"],
  "PY": ["Paraguay"],
  "AM": ["Armenia"],
  "PT": ["Portugal"],
  "AD": ["Andorra"],
  "PW": ["Palau"],
  "AG": ["Antigua and Barbuda"],
  "AE": ["United Arab Emirates"],
  "PR": ["Puerto Rico"],
  "AF": ["Afghanistan"],
  "PS": ["Palestinian Territory"],
  "NU": ["Niue"],
  "NR": ["Nauru"],
  "NP": ["Nepal"],
  "NO": ["Norway"],
  "NZ": ["New Zealand"],
  "OM": ["Oman"],
  "PE": ["Peru"],
  "PF": ["French Polynesia"],
  "PG": ["Papua New Guinea"],
  "PA": ["Panama"],
  "PL": ["Poland"],
  "PM": ["Saint Pierre and Miquelon"],
  "PN": ["Pitcairn"],
  "PH": ["Philippines"],
  "PK": ["Pakistan"],
  "LS": ["Lesotho"],
  "LR": ["Liberia"],
  "LV": ["Latvia"],
  "LU": ["Luxembourg"],
  "LT": ["Lithuania"],
  "LY": ["Libyan Arab Jamahiriya"],
  "MC": ["Monaco"],
  "MD": ["Moldova"],
  "MA": ["Morocco"],
  "A1": ["Anonymous Proxy"],
  "MG": ["Madagascar"],
  "A2": ["Satellite Provider"],
  "MH": ["Marshall Islands"],
  "ME": ["Montenegro"],
  "MF": ["Saint Martin"],
  "MK": ["Macedonia"],
  "ML": ["Mali"],
  "MN": ["Mongolia"],
  "MM": ["Myanmar"],
  "MP": ["Northern Mariana Islands"],
  "O1": ["Other Country"],
  "MO": ["Macao"],
  "MR": ["Mauritania"],
  "MQ": ["Martinique"],
  "MT": ["Malta"],
  "MS": ["Montserrat"],
  "MV": ["Maldives"],
  "MU": ["Mauritius"],
  "MX": ["Mexico"],
  "MW": ["Malawi"],
  "MZ": ["Mozambique"],
  "MY": ["Malaysia"],
  "NA": ["Namibia"],
  "NC": ["New Caledonia"],
  "NE": ["Niger"],
  "NF": ["Norfolk Island"],
  "NG": ["Nigeria"],
  "NI": ["Nicaragua"],
  "NL": ["the Netherlands", "Holland"],
  "JP": ["Japan"],
  "JO": ["Jordan"],
  "JM": ["Jamaica"],
  "KI": ["Kiribati"],
  "KH": ["Cambodia"],
  "KG": ["Kyrgyzstan"],
  "KE": ["Kenya"],
  "KW": ["Kuwait"],
  "KY": ["Cayman Islands"],
  "KZ": ["Kazakhstan"],
  "KP": ["Korea"],
  "KR": ["Korea"],
  "KM": ["Comoros"],
  "KN": ["Saint Kitts and Nevis"],
  "LI": ["Liechtenstein"],
  "LK": ["Sri Lanka"],
  "LA": ["Lao People's Democratic Republic"],
  "LC": ["Saint Lucia"],
  "LB": ["Lebanon"],
  "HR": ["Croatia"],
  "HT": ["Haiti"],
  "HU": ["Hungary"],
  "HK": ["Hong Kong"],
  "ZA": ["South Africa"],
  "HN": ["Honduras"],
  "HM": ["Heard Island and McDonald Islands"],
  "ZW": ["Zimbabwe"],
  "ID": ["Indonesia"],
  "IE": ["Ireland"],
  "ZM": ["Zambia"],
  "IQ": ["Iraq"],
  "IR": ["Iran"],
  "YE": ["Yemen"],
  "IS": ["Iceland"],
  "IT": ["Italy"],
  "IL": ["Israel"],
  "IM": ["Isle of Man"],
  "IN": ["India"],
  "IO": ["British Indian Ocean Territory"],
  "JE": ["Jersey"],
  "YT": ["Mayotte"]
};
window.jdata = window.jdata || {};
window.jdata.countryContinent = {
  "AD": "EU",
  "AE": "AS",
  "AF": "AS",
  "AG": "LA",
  "AI": "LA",
  "AL": "EU",
  "AM": "AS",
  "AN": "LA",
  "AO": "AF",
  "AQ": "AN",
  "AR": "LA",
  "AS": "OC",
  "AT": "EU",
  "AU": "OC",
  "AW": "LA",
  "AX": "EU",
  "AZ": "AS",
  "BA": "EU",
  "BB": "LA",
  "BD": "AS",
  "BE": "EU",
  "BF": "AF",
  "BG": "EU",
  "BH": "AS",
  "BI": "AF",
  "BJ": "AF",
  "BL": "LA",
  "BM": "LA",
  "BN": "AS",
  "BO": "LA",
  "BQ": "LA",
  "BR": "LA",
  "BS": "LA",
  "BT": "AS",
  "BV": "AN",
  "BW": "AF",
  "BY": "EU",
  "BZ": "LA",
  "CA": "NA",
  "CC": "AS",
  "CD": "AF",
  "CF": "AF",
  "CG": "AF",
  "CH": "EU",
  "CI": "AF",
  "CK": "OC",
  "CL": "LA",
  "CM": "AF",
  "CN": "AS",
  "CO": "LA",
  "CR": "LA",
  "CS": "EU",
  "CU": "LA",
  "CV": "AF",
  "CW": "LA",
  "CX": "AS",
  "CY": "EU",
  "CZ": "EU",
  "DE": "EU",
  "DJ": "AF",
  "DK": "EU",
  "DM": "LA",
  "DO": "LA",
  "DZ": "AF",
  "EC": "LA",
  "EE": "EU",
  "EG": "AF",
  "EH": "AF",
  "ER": "AF",
  "ES": "EU",
  "ET": "AF",
  "FI": "EU",
  "FJ": "OC",
  "FK": "LA",
  "FM": "OC",
  "FO": "EU",
  "FR": "EU",
  "GA": "AF",
  "GB": "EU",
  "GD": "LA",
  "GE": "AS",
  "GF": "LA",
  "GG": "EU",
  "GH": "AF",
  "GI": "EU",
  "GL": "LA",
  "GM": "AF",
  "GN": "AF",
  "GP": "LA",
  "GQ": "AF",
  "GR": "EU",
  "GS": "AN",
  "GT": "LA",
  "GU": "OC",
  "GW": "AF",
  "GY": "LA",
  "HK": "AS",
  "HM": "AN",
  "HN": "LA",
  "HR": "EU",
  "HT": "LA",
  "HU": "EU",
  "ID": "AS",
  "IE": "EU",
  "IL": "AS",
  "IM": "EU",
  "IN": "AS",
  "IO": "AS",
  "IQ": "AS",
  "IR": "AS",
  "IS": "EU",
  "IT": "EU",
  "JE": "EU",
  "JM": "LA",
  "JO": "AS",
  "JP": "AS",
  "KE": "AF",
  "KG": "AS",
  "KH": "AS",
  "KI": "OC",
  "KM": "AF",
  "KN": "LA",
  "KP": "AS",
  "KR": "AS",
  "KW": "AS",
  "KY": "LA",
  "KZ": "AS",
  "LA": "AS",
  "LB": "AS",
  "LC": "LA",
  "LI": "EU",
  "LK": "AS",
  "LR": "AF",
  "LS": "AF",
  "LT": "EU",
  "LU": "EU",
  "LV": "EU",
  "LY": "AF",
  "MA": "AF",
  "MC": "EU",
  "MD": "EU",
  "ME": "EU",
  "MF": "LA",
  "MG": "AF",
  "MH": "OC",
  "MK": "EU",
  "ML": "AF",
  "MM": "AS",
  "MN": "AS",
  "MO": "AS",
  "MP": "OC",
  "MQ": "LA",
  "MR": "AF",
  "MS": "LA",
  "MT": "EU",
  "MU": "AF",
  "MV": "AS",
  "MW": "AF",
  "MX": "LA",
  "MY": "AS",
  "MZ": "AF",
  "NA": "AF",
  "NC": "OC",
  "NE": "AF",
  "NF": "OC",
  "NG": "AF",
  "NI": "LA",
  "NL": "EU",
  "NO": "EU",
  "NP": "AS",
  "NR": "OC",
  "NU": "OC",
  "NZ": "OC",
  "OM": "AS",
  "PA": "LA",
  "PE": "LA",
  "PF": "OC",
  "PG": "OC",
  "PH": "AS",
  "PK": "AS",
  "PL": "EU",
  "PM": "LA",
  "PN": "OC",
  "PR": "LA",
  "PS": "AS",
  "PT": "EU",
  "PW": "OC",
  "PY": "LA",
  "QA": "AS",
  "RE": "AF",
  "RO": "EU",
  "RS": "EU",
  "RU": "EU",
  "RW": "AF",
  "SA": "AS",
  "SB": "OC",
  "SC": "AF",
  "SD": "AF",
  "SE": "EU",
  "SG": "AS",
  "SH": "AF",
  "SI": "EU",
  "SJ": "EU",
  "SK": "EU",
  "SL": "AF",
  "SM": "EU",
  "SN": "AF",
  "SO": "AF",
  "SR": "LA",
  "SS": "AF",
  "ST": "AF",
  "SV": "LA",
  "SX": "LA",
  "SY": "AS",
  "SZ": "AF",
  "TC": "LA",
  "TD": "AF",
  "TF": "AN",
  "TG": "AF",
  "TH": "AS",
  "TJ": "AS",
  "TK": "OC",
  "TL": "OC",
  "TM": "AS",
  "TN": "AF",
  "TO": "OC",
  "TR": "AS",
  "TT": "LA",
  "TV": "OC",
  "TW": "AS",
  "TZ": "AF",
  "UA": "EU",
  "UG": "AF",
  "UM": "OC",
  "US": "NA",
  "UY": "LA",
  "UZ": "AS",
  "VA": "EU",
  "VC": "LA",
  "VE": "LA",
  "VG": "LA",
  "VI": "LA",
  "VN": "AS",
  "VU": "OC",
  "WF": "OC",
  "WS": "OC",
  "XK": "EU",
  "YE": "AS",
  "YT": "AF",
  "ZA": "AF",
  "ZM": "AF",
  "ZW": "AF"
};
window.jdata.continent = {
  "EU": "Europe",
  "AS": "Asia",
  "NA": "North America",
  "LA": "Latin America",
  "OC": "Oceania",
  "AF": "Africa"
};
window.jdata.location = {
  "US": {
    "LA": "Los Angeles",
    "CH": "Chicago",
    "TX": "Texas",
    "GA": "Georgia",
    "NJ": "New Jersey",
    "NY": "New York",
    "NY1": "New York 1",
    "NY2": "New York 2"
  },
  "FI": {
    "HE": "Helsinki",
    "ES": "Espoo"
  },
  "CH": {
    "ATT": "Attinghausen",
    "ZU": "Zurich",
    "BN": "Bern",
    "GG": "Gland - Geneva",
    "GN1": "Geneva 1",
    "GN2": "Geneva 2"
  },
  "BR": {
    "CMP": "Campinas",
    "NOR": "Nordeste",
    "SP": "São Paulo"
  },
  "BE": {
    "NL": "datacenter in the Netherlands"
  },
  "IN": {
    "PU": "Pune"
  },
  "IL": {
    "RH": "Rosh Haayin",
    "JF": "Jaffa"
  },
  "NL": {
    "MP": "Meppel",
    "DT": "Dronten",
    "AM": "Amsterdam",
    "HW": "Hengelo West",
    "HS": "Hengelo South"
  },
  "SE": {
    "SH1": "Stockholm North",
    "SH2": "Stockholm South",
    "SH3": "Stockholm West"
  },
  "SA": {
    "JD": "Jeddah",
    "RD": "Riyadh",
    "KH": "Khobar"
  },
  "GB": {
    "LND": "London",
    "LND1": "London 1",
    "LND2": "London 2"
  },
  "DE": {
    "FR": "Frankfurt"
  },
  "RU": {
    "MO": "Moscow"
  },
  "FR": {
    "AP": "Aix-en-Provence"
  }
};
window.jdata = window.jdata || {};
window.jdata.features = {
  "WP": "WordPress",
  "MG": "Magento",
  "KB": "Kubernetes",
  "K8B": "Kubernetes",
  "K8S": "Kubernetes",
  "CDN": "Premium CDN",
  "LS": "LiteSpeed",
  "VIP": "VPC Region",
  "VPC": "VPC Region",
  "VP": "VPC Region",
  "CS": "Cloud Storage",
  "DC": "Docker Native"
};
var JApp = window.JApp || {};
$ = $ || jQuery;

window.JApp = function (that) {
  var sDefaultHoster = "eapps",
      sLang = "en",
      sLoadedDefHoster = '',
      PATH_TO_JS = '/wp-content/themes/salient/js/';
  that.COOKIE_EXTERNAL_REFERER = "je-external-referer";
  that.COOKIE_FIRST_EXTERNAL_REFERER = "je-first-external-referer";
  that.COOKIE_UTM_LABELS = "je-utm-labels";
  that.RECAPCHA_KEY = "6LcR2y0UAAAAALs_-g-iuco7GoI2GTFd7rTl_pNe";
  that.userIP;
  that.userCountry;

  that.getLang = function () {
    return sLang;
  };

  that.getDefaultHoster = function () {
    return sLoadedDefHoster || sDefaultHoster;
  };

  that.isLoadedDefHoster = function () {
    return sLoadedDefHoster.length !== 0;
  };

  that.url = {
    getPlatformsInfoHost: function getPlatformsInfoHost() {
      return "//platforms-info.jelastic.com";
    },
    getSignupURL: function getSignupURL() {
      return that.url.getPlatformsInfoHost() + "/api/site/signup";
    },
    getUserDefHosterURL: function getUserDefHosterURL() {
      return that.url.getPlatformsInfoHost() + "/api/user/getdefhoster";
    },
    getUserCountryURL: function getUserCountryURL() {
      return that.url.getPlatformsInfoHost() + "/api/user/getcountry";
    },
    getAppsURL: function getAppsURL() {
      return "//marketplace.jelastic.com/GetApps?search=%7B%22appstore%22:%221%22%7D";
    },
    getInstallAppURL: function getInstallAppURL() {
      return '//go.jelastic.com/InstallApp';
    },
    getHosters: function getHosters() {
      return "//platforms-info.jelastic.com/api/site/GetHosters";
    },
    getCrossApi: function getCrossApi() {
      return that.url.getPlatformsInfoHost() + "/1.0/development/scripting/cross/eval";
    }
  };

  that.loadApps = function (fnCallback) {
    $.ajax({
      type: "GET",
      url: JApp.url.getAppsURL(),
      success: function success(response) {
        var oResp = jQuery.parseJSON(response) || {};

        if (oResp.result === 0 && oResp.response) {
          oResp = oResp.response;
        }

        if (fnCallback) {
          fnCallback(oResp);
        }
      }
    });
  };

  that.loadHosters = function (fnCallback) {
    $.ajax({
      type: "GET",
      url: JApp.url.getHosters(),
      async: true,
      success: function success(response) {
        var oResp = '';

        if (response.result === 0 && response.hosters) {
          oResp = response.hosters;
        }

        if (fnCallback) {
          fnCallback(oResp);
        }
      }
    });
  };

  that.loadDefaultHoster = function (fnCallback, oCriteria) {
    oCriteria = oCriteria || {};
    $.ajax({
      type: "POST",
      url: JApp.url.getUserDefHosterURL(),
      data: {
        criteria: JSON.stringify(oCriteria)
      },
      success: function success(response) {
        var oResp = jQuery.parseJSON(response) || {};

        if (oResp.result === 0 && oResp.response) {
          oResp = oResp.response;
        }

        sLoadedDefHoster = oResp.hoster;

        if (fnCallback) {
          fnCallback();
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        sLoadedDefHoster = sDefaultHoster;

        if (fnCallback) {
          fnCallback();
        }
      }
    });
  };

  that.loadDefHosterByCookie = function (fnCallback, sAvailableHosters) {
    var fnOnResp, nTimeout, availableHosters;
    availableHosters = [];
    $.each(window.hosters, function (i, oHoster) {
      availableHosters[i] = oHoster.keyword;
    });
    availableHosters = availableHosters.join();

    fnOnResp = function fnOnResp(oResponse) {
      clearTimeout(nTimeout);

      if (oResponse && oResponse.result === 0) {
        oResponse = oResponse.response;
      }

      if (oResponse.result === 0) {
        sLoadedDefHoster = oResponse.hoster;
      } else {
        JApp.debug.info("Default hoster did not determined.", oResponse);
      }

      if (fnCallback) {
        fnCallback(sLoadedDefHoster);
      }
    };

    that.utils.CROSSTransport.request(JApp.url.getCrossApi(), {
      script: "api.user.getdefhoster",
      availableHosters: availableHosters,
      forceUserPlatform: true
    }, fnOnResp);
    nTimeout = setTimeout(function () {
      fnOnResp({
        error: "Timeout exceed"
      }, "error");
    }, 5000);
  };

  that.GetUserCountry = function (fnCallback) {
    var sDefault = "N/A";
    $.ajax({
      type: 'POST',
      url: JApp.url.getUserCountryURL(),
      success: function success(sResponse) {
        var oResp = jQuery.parseJSON(sResponse);

        if (oResp.result === 0 && oResp.response.result === 0) {
          fnCallback(oResp.response.country);
          $.cookie('user_country', oResp.response.country);
        } else {
          fnCallback(sDefault);
        }
      },
      error: function error() {
        fnCallback(sDefault);
      }
    });
  };

  that.GetUserIp = function (fnCallback) {
    var sDefaultIP = '127.0.0.1';
    UserInfo.getInfo(function (data) {
      JApp.userIP = data.ip_address;
      JApp.userCountry = data.country.name;
      $.cookie('user_ip', data.ip_address, {
        expires: 7,
        path: '/'
      });
      $.cookie('user_country', data.country.name, {
        expires: 7,
        path: '/'
      });

      if (fnCallback) {
        fnCallback(data.ip_address);
      }
    }, function (err) {
      fnCallback(sDefaultIP);
    });
  };

  that.InstallApp = function (oParams, fnCallback) {
    var data = {
      email: oParams.email,
      app: oParams.appid,
      key: oParams.hoster,
      manifest: oParams.manifest,
      group: oParams.group,
      source: oParams.source,
      iref: document.location.href,
      eref: document.referrer,
      lang: 'en'
    },
        fnCallbackWrap;

    fnCallbackWrap = function fnCallbackWrap(response, textStatus) {
      var oResp = jQuery.parseJSON(response);

      if (fnCallback) {
        fnCallback(oResp);
      }
    };

    $.ajax({
      type: 'POST',
      data: data,
      url: JApp.url.getInstallAppURL(),
      success: fnCallbackWrap,
      error: fnCallbackWrap
    });
  };

  that.jsPath = function () {
    return PATH_TO_JS;
  };

  return that;
}(window.JApp || {});

JApp.utils = function (that) {
  that.toCamelCase = function (str) {
    return str.replace(/\s(.)/g, function (s) {
      return s.toUpperCase();
    }).replace(/\s/g, '').replace(/^(.)/, function (s) {
      return s.toLowerCase();
    });
  };

  that.isValidEmail = function (email) {
    var pattern = /.@./;
    return pattern.test(email);
  };

  that.isValidEmailStrong = function (email) {
    var pattern = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])$/i;
    return pattern.test(email);
  };

  that.checkFraudEmail = function (email) {
    var requestIP = '';

    if (JApp.userIP) {
      requestIP = '&userip=' + JApp.userIP;
    }

    var url = '//platforms-info.jelastic.com/api/site/checkfraudemail?email=' + encodeURIComponent(email) + requestIP;
    $.ajax({
      type: "GET",
      url: url,
      success: function success(response) {
        if (response.result !== 0) {
          var maxmindBan = '';
          var riskScore = '';
          var risk = '';
          maxmindBan = response.maxmindBan;

          if (maxmindBan) {
            riskScore = response.maxmindResponse.risk_score;
            risk = response.maxmindResponse.ip_address.risk;
          }

          that.SendBadEmailToDB(email, maxmindBan, riskScore, risk);
        }
      },
      error: function error(err) {
        console.warn('err: ', err);
      }
    });
  };

  that.SendBadEmailToDB = function (email, maxmindBan, riskScore, risk) {
    $.ajax({
      url: "/wp-admin/admin-ajax.php",
      data: {
        "action": "add_acae_email",
        "email": email,
        "ip": JApp.userIP,
        "country": JApp.userCountry,
        "maxmindban": maxmindBan,
        "riskscore": riskScore,
        "risk": risk
      },
      method: "POST",
      success: function success(data) {// console.log('response: ', data);
      },
      error: function error(err) {
        console.warn('error: ', err);
      }
    });
  };

  that.cutStr = function (sStr, nMAxLng) {
    var STRING_SEP = ". ",
        aString;
    nMAxLng = nMAxLng || 90;

    if (sStr.length > nMAxLng) {
      aString = sStr.substring(0, nMAxLng).split(STRING_SEP);

      if (aString.length > 1) {
        aString.pop();
        sStr = aString.join(STRING_SEP) + ".";
      } else {
        sStr = sStr.substring(0, nMAxLng - 3) + "...";
      }
    }

    return sStr;
  };

  return that;
}(JApp.utils || {});

JApp.utils.reCaptcha = function () {
  var oLoadCaptcha = $.Deferred();

  window.onReCaptchaLoad = function () {
    oLoadCaptcha.resolve();
  };

  return function (oParams) {
    var me = this,
        sTarget = oParams.target,
        fnChange = function fnChange(sV) {
      sValue = sV;

      if ($.isFunction(me.onChange)) {
        me.onChange(sValue);
      }
    },
        sValue,
        nId;

    me.getValue = function () {
      return sValue;
    };

    me.onChange = oParams.onChange || null;

    me.reset = function () {
      grecaptcha.reset(nId);
    };

    me.getId = function () {
      return nId;
    };

    oLoadCaptcha.done(function () {
      nId = grecaptcha.render(sTarget, {
        sitekey: JApp.RECAPCHA_KEY,
        size: 'invisible',
        callback: fnChange
      });
    });
    return me;
  };
}();

JApp.utils.Modal = function (that) {
  that.errors = {
    TOKEN_TO_SHORT: "Token should consist of 40 symbols",
    INVALID_EMAIL: "The e-mail value is not valid",
    INVALID_DATA: "This field is not valid",
    SOME_ERROR_INSTALL: "Some error has occurred",
    REQUIRED_FIELD: "This field is required"
  };

  that.show = function ($el, oOpt) {
    var nTimeoutId,
        sMsg = oOpt.msg,
        sPos = oOpt.position || 'right',
        nTimeOut = oOpt.hideTime || 5000,
        nWidth = oOpt.width || 220,
        fnHide,
        bAutoHide = oOpt.autoHide || true;

    if (sPos === 'auto') {
      sPos = $(window).width() - $el.offset().left - $el.width() > nWidth ? 'right' : 'bottom';
    }

    fnHide = function fnHide() {
      if (bAutoHide) {
        clearTimeout(nTimeoutId);
      }

      $el.popover('hide');
    }; // $el.popover('destroy');


    $el.popover($.extend(oOpt, {
      placement: sPos,
      trigger: 'manual',
      animation: true,
      content: sMsg
    })).popover('show');

    if (bAutoHide) {
      nTimeoutId = setTimeout(function () {
        $el.popover('hide');
      }, nTimeOut);
    }

    $el.one("focus keypress change").focus(function () {
      fnHide();
    });
  };

  that.hoverShow = function (oEl, oOpt) {
    oEl.hover(function () {
      that.show(oEl, oOpt);
    }, function () {
      oEl.popover("hide");
    });
  };

  that.Massage = function () {
    var $cnt = $('#modal-general'),
        $title = $cnt.find('.title'),
        $msg = $cnt.find('.massage');
    return function (oParams) {
      var oOptions = {
        backdrop: oParams.backdrop || true,
        keyboard: oParams.keyboard || true,
        show: oParams.show || true
      };
      $title.html(oParams.title || '');
      $msg.html(oParams.msg || '');
      $cnt.modal(oOptions);
    };
  }();

  return that;
}(JApp.utils.Modal || {});

JApp.Metrika = function (that) {
  that.EVENTS = {
    SUBMIT_HOSTERS_REQUEST_INFORMATION: "SUBMIT_HOSTERS_REQUEST_INFORMATION",
    SUBMIT_PRIVATE_CLOUD_FREE_TRIAL: "SUBMIT_PRIVATE_CLOUD_FREE_TRIAL",
    SUBMIT_SPECIAL_HOSTER_LANDING: "SUBMIT_SPECIAL_HOSTER_LANDING",
    SUBMIT_LANDING_VPC: "SUBMIT_LANDING_VPC",
    SUBMIT_VIRTUAL_PRIVATE_CLOUD: "SUBMIT_VIRTUAL_PRIVATE_CLOUD"
  };

  that.getCounter = function () {
    return window.yaCounter28600226;
  };

  that.trackSubmitting = function (sEvent, fnCallback, oParams) {
    var oCounter = that.getCounter();

    if (oCounter) {
      oCounter.reachGoal(sEvent, oParams, fnCallback);
    }
  };

  return that;
}(JApp.Metrika || {});

JApp.GA = function (that) {
  var oMetrika = JApp.Metrika;

  that.track = function (oParams) {
    var oOptions = {
      "hitType": "event",
      "eventCategory": oParams.category,
      "eventAction": oParams.action || '',
      "eventLabel": oParams.label || ''
    };

    if (Object.prototype.hasOwnProperty.call(oParams, "value")) {
      oOptions.eventValue = oParams.value;
    }

    if (!!oParams.redirect) {
      oOptions.hitCallback = function () {
        setTimeout(function () {
          window.location.href = oParams.redirect;
        }, 50);
      };
    }

    JApp.debug.info("Track GA", oOptions);

    if (window.ga) {
      ga("send", oOptions);
    }

    if (oOptions.hitCallback) {
      if (window.ga) {
        setTimeout(oParams.hitCallback, 1500);
      } else {
        oOptions.hitCallback();
      }
    }
  };

  that.trackSelectApp = function (appid) {
    that.track({
      category: 'Marketplace',
      action: 'Marketplace-Select-App',
      label: appid
    });
  };

  that.trackInstallApp = function (appid, nComplete) {
    that.track({
      category: 'Marketplace',
      action: 'Marketplace-Install-' + nComplete === 0 ? 'Success' : 'Error',
      label: appid
    });
  };

  that.trackSubscribe = function (sEmail) {
    that.track({
      category: 'Subscribe',
      action: that.getDomainSource(),
      email: sEmail
    });
  };

  that.trackPrivateCloudEmail = function (sValue) {
    that.trackFormSubmitting('Private-Cloud', sValue);
    oMetrika.trackSubmitting(oMetrika.SUBMIT_PRIVATE_CLOUD_FREE_TRIAL);
  };

  that.trackPrivateLandingEmail = function (sValue) {
    that.trackFormSubmitting('Private-Landing', sValue);

    if (window.fbq) {
      window.fbq('track', 'CompleteRegistration');
    }

    oMetrika.trackSubmitting(oMetrika.SUBMIT_HOSTERS_REQUEST_INFORMATION);
  };

  that.trackHosterCloudFreeTrial = function (sValue) {
    that.trackFormSubmitting('Hosters-Trial-Request', sValue);
  };

  that.trackFormSubmitting = function (sForm, sValue, sRedirect) {
    that.track({
      category: "Submit-form",
      action: sForm,
      label: sValue,
      redirect: sRedirect
    });
  };

  that.trackSubmitRequestVPC = function (sValue) {
    that.trackFormSubmitting('VPC', sValue);
    oMetrika.trackSubmitting(oMetrika.SUBMIT_VIRTUAL_PRIVATE_CLOUD);
  };

  that.trackSubmitAboutEvents = function (sValue) {
    that.trackFormSubmitting('About-Events', sValue);
  };

  that.trackSubmitLandingVPC = function (sValue) {
    that.trackFormSubmitting('Landing-VPC', sValue);
    oMetrika.trackSubmitting(oMetrika.SUBMIT_LANDING_VPC);
  };

  that.trackSubmitPacketLanding = function (sValue) {
    that.trackFormSubmitting('Packet-Landing', sValue);
    oMetrika.trackSubmitting(oMetrika.SUBMIT_SPECIAL_HOSTER_LANDING);
  };

  that.trackSignupSuccess = function (sHoster, sLink) {
    var sDefault = JApp.isLoadedDefHoster() ? JApp.getDefaultHoster() : "notDefined";
    that.track({
      category: "signup",
      action: sHoster,
      label: sDefault + " >> " + sHoster,
      redirect: sLink
    });
  };

  that.trackSignupError = function (sHoster, sMsg) {
    that.track({
      category: "signup-error",
      action: sHoster,
      label: sMsg
    });
  };

  that.trackPageview = function (sPage, sTitle) {
    if (window.ga) {
      window.ga('send', 'pageview', {
        'page': sPage,
        'title': sTitle || ''
      });
    }
  };

  that.getDomainSource = function () {
    var sDomain = window.location.host,
        sSubDomain = sDomain.replace(".jelastic.com", ""),
        sSource = "Jelastic";

    if (sSubDomain !== sDomain) {
      sSource += "-" + JApp.utils.toCamelCase(sSubDomain);
    }

    return sSource;
  };

  return that;
}(JApp.GA || {});

JApp.bind = function (that) {
  var $body = $('body');

  that.miss = function (sTarget, callback) {
    $body.on('click.miss', function (e) {
      if (e.originalEvent && $(e.target).closest(sTarget).length === 0) {
        if (callback() === false) {
          $body.off('click.miss');
          return false;
        }
      }
    });
  };

  return that;
}(JApp.bind || {});

JApp.user = function (that) {
  that.signupErrors = {
    UNKNOWN: "Something went wrong. We suspect this was caused by network issues, so please try again in a few minutes. If your second attempt fails, please, email us at <a href='mailto:info@jelastic.com'>info@jelastic.com</a> to get the assistance with account creation.",
    ERROR_EMAIL: "The specified email address is not allowed for registration. Please use another email or contact us at <a href='mailto:info@jelastic.com'>info@jelastic.com</a> for the assistance.",
    EMAIL_DENY: "The specified email address is not allowed for registration. Please use another email or contact us at <a href='mailto:info@jelastic.com'>info@jelastic.com</a> for the assistance."
  };

  that.Signup = function (oData, sCurrentHoster, ops) {
    var oParams,
        oLocation = window.location,
        sReferrer = oLocation.href,
        sError,
        fCallback,
        bRedirect,
        sMarketingSource = JApp.GA.getDomainSource();

    if (document.referrer) {
      sReferrer += (oLocation.search ? "&" : "?") + "referrer=" + document.referrer;
    }

    function trackGA(success, sMsg, sLink) {
      sMsg = sMsg || "unknown";

      if (success === false) {
        JApp.GA.trackPageview("/signup/error");
        JApp.GA.trackSignupError(sCurrentHoster, sMsg);
      } else {
        JApp.GA.trackPageview("/signup/success");
        JApp.GA.trackSignupSuccess(sCurrentHoster, sLink);
      }
    }

    ops = ops || {};
    fCallback = ops.callback;
    bRedirect = ops.redirect !== false;
    oParams = JSON.stringify({
      "name": oData.name,
      "email": oData.email,
      "comment": oData.comment,
      "verifyKey": oData.verifyKey,
      "hoster": sCurrentHoster,
      "referrer": sReferrer,
      "marketing_source": sMarketingSource,
      "source": sMarketingSource,
      "lang": JApp.getLang() || String(navigator.language || navigator.browserLanguage).toLowerCase(),
      "ext_referrer": $.cookie(JApp.COOKIE_EXTERNAL_REFERER),
      "utm_label": $.cookie(JApp.COOKIE_UTM_LABELS)
    });
    $.ajax({
      type: "POST",
      url: JApp.url.getSignupURL(),
      data: {
        "data": oParams
      },
      success: function success(response) {
        var oResp = jQuery.parseJSON(response),
            bSuccess = true,
            nResult = oResp.result,
            sMsg;

        if (oResp && nResult == 0 && oResp.response) {
          oResp = oResp.response;
          nResult = oResp.result;
        }

        if (!oResp || nResult != 0) {
          bSuccess = false;
        }

        if (bSuccess === false) {
          oResp = oResp || "Response is undefined";
          sMsg = JSON.stringify(oResp);

          switch (nResult) {
            case 501:
              sError = that.signupErrors.ERROR_EMAIL;
              break;

            case 508:
              sError = that.signupErrors.EMAIL_DENY;
              break;

            case 10008:
              sError = that.signupErrors.EMAIL_DENY;
              JApp.utils.checkFraudEmail(oData.email);
              break;

            default:
              sError = that.signupErrors.UNKNOWN;
          }

          JApp.utils.Modal.Massage({
            title: "Registration failed",
            msg: sError
          });
        }

        trackGA(bSuccess, sMsg, String(oResp.app).indexOf("?") > -1 ? oResp.app : oResp.app + '?signup=' + oResp.email);

        if (fCallback) {
          fCallback(bSuccess, nResult);
        }
      },
      error: function error(oJqXHR, textStatus, errorThrown) {
        console.log(1);
        JApp.utils.Modal.Massage({
          title: "Registration failed",
          msg: that.signupErrors.UNKNOWN
        });
        trackGA(false, (textStatus || "error") + ": " + (oJqXHR.status || "") + (errorThrown || "unknown"));

        if (fCallback) {
          fCallback(false);
        }
      }
    });
  };

  that.subscribe = function (sUrl, oData, fnCallback) {
    $.ajax({
      type: "POST",
      url: sUrl,
      data: oData,
      complete: function complete(oResponse) {
        var oResp = jQuery.parseJSON(oResponse.responseText),
            nResult = oResp.result;

        if (oResp && oResp.result == 0) {
          JApp.GA.trackSubscribe(oData.email);
        }

        if (fnCallback) {
          fnCallback(nResult);
        }
      }
    });
  };

  return that;
}(JApp.user || {});

JApp.debug = function (that) {
  var bDebug = !!window.debugMode;

  that.log = function () {
    if (bDebug) {
      console.log.apply(console, arguments);
    }
  };

  that.info = function () {
    if (bDebug) {
      console.info.apply(console, arguments);
    }
  };

  return that;
}(JApp.debug || {});

jQuery(document).ready(function ($) {
  var calculatorTag = $('.j-calculator'),
      sHtml = '',
      sCurrentHoster = 'servnet',
      bInitDefCor,
      fnSetDefault,
      fnInitDefaultHoster,
      oHosters = [],
      pricing = '',
      currency = '',
      calculatorsWithSelector = [],
      sCssLoading = 'loading';
  $(calculatorTag).addClass(sCssLoading);

  function renderHosterSelector(el) {
    oHosters.sort(function (a, b) {
      var nameA = a.keyword.toLowerCase(),
          nameB = b.keyword.toLowerCase();
      if (nameA < nameB) return -1;
      if (nameA > nameB) return 1;
      return 0;
    });
    sHtml = new EJS({
      url: '/j-calculator/templates/j-hoster-selector'
    }).render({
      txChoose: 'Choose Service Provider of Jelastic Public Cloud',
      txPerfomance: 'Perfomance',
      txSupport: 'Support',
      txLocation: 'Location',
      txServices: 'Advanced Services',
      defHoster: sCurrentHoster,
      hosters: oHosters
    });

    for (var i = 0, oHoster; oHoster = oHosters[i]; i++) {
      if (sCurrentHoster === oHoster.keyword) {
        $(el).attr('data-key', oHoster.key);
        $(el).attr('data-hoster', oHoster.keyword);
        $(el).attr('data-custom-signup', oHoster.customSignUp);
      }
    }

    if ($(el).find('.hoster-selector').length > 0) {
      $(el).find('.hoster-selector').replaceWith(sHtml);
    } else {
      $(el).append(sHtml);
    }

    $(el).find('.hoster-selector--select').each(function () {
      var $this = $(this),
          numberOfOptions = $(this).children('option').length;
      $this.addClass('select-hidden');
      $this.wrap('<div class="select"></div>');
      $this.after('<div class="select-styled"></div>');
      var $styledSelect = $this.next('div.select-styled');
      $styledSelect.text($this.children('option:selected').text());
      var $list = $('<ul />', {
        'class': 'select-options'
      }).insertAfter($styledSelect);

      for (var i = 0; i < numberOfOptions; i++) {
        var classes = '';

        if ($this.children('option').eq(i).text() === $this.children('option:selected').text()) {
          classes = 'current-hoster';
        }

        var li = $('<li />', {
          text: $this.children('option').eq(i).text(),
          rel: $this.children('option').eq(i).val(),
          class: classes
        }).appendTo($list);
        var li_flags = $('<span />', {
          class: 'flags'
        }).appendTo(li);
        var loc = $this.children('option').eq(i).attr('data-location').split(',').filter(onlyUnique);
        $.each(loc, function (index, code) {
          $('<i />', {
            class: 'flag flag-' + code,
            text: code
          }).appendTo(li_flags);
        });
      }

      var $listItems = $list.children('li');
      $styledSelect.click(function (e) {
        e.stopPropagation();
        $('div.select-styled.active').not(this).each(function () {
          $(this).removeClass('active').next('ul.select-options').hide();
        });
        $(this).toggleClass('active').next('ul.select-options').toggle();
      });
      $listItems.click(function (e) {
        e.stopPropagation();
        $styledSelect.text($(this).text()).removeClass('active');
        $this.val($(this).attr('rel')).change();
        $list.hide();
      });
      $(document).click(function () {
        $styledSelect.removeClass('active');
        $list.hide();
      });
    });
  }

  function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
  }

  function renderCalculator(el) {
    var oLanguages = $(el).data('languages') || ['java', 'php', 'node', 'python', 'go', 'ruby'],
        fixed = '',
        dynamic = '',
        ip = '',
        network = '',
        storage = '',
        period = $(el).attr('data-period') || 'hourly';

    if (!Array.isArray(oLanguages)) {
      oLanguages = oLanguages.split(",").map(function (item) {
        return item.trim();
      });
    }

    window.currency.sort(function (a, b) {
      var nameA = a.code.toLowerCase(),
          nameB = b.code.toLowerCase();
      if (nameA < nameB) return -1;
      if (nameA > nameB) return 1;
      return 0;
    });
    $.each(window.currency, function (index) {
      if (this.code === 'USD' || this.code === 'EUR') {
        window.currency.splice(0, 0, window.currency.splice(index, 1)[0]);
      }
    });
    sHtml = new EJS({
      url: '/j-calculator/templates/j-calculator'
    }).render({
      oLanguages: oLanguages,
      id: Math.round(Math.random() * 100000000),
      currencies: window.currency,
      balancerNodes: parseInt($(el).attr('data-balancer-nodes')) || 1,
      balancerMin: parseInt($(el).attr('data-balancer-min')) || 0,
      balancerMax: parseInt($(el).attr('data-balancer-max')) || 128,
      balancerReserved: parseInt($(el).attr('data-balancer-reserved')) || 0,
      balancerScaling: parseInt($(el).attr('data-balancer-scaling')) || 0,
      appServerNodes: parseInt($(el).attr('data-appserver-nodes')) || 1,
      appServerMin: parseInt($(el).attr('data-appserver-min')) || 0,
      appServerMax: parseInt($(el).attr('data-appserver-max')) || 128,
      appServerReserved: parseInt($(el).attr('data-appserver-reserved')) || 1,
      appServerScaling: parseInt($(el).attr('data-appserver-scaling')) || 64,
      databaseNodes: parseInt($(el).attr('data-database-nodes')) || 1,
      databaseMin: parseInt($(el).attr('data-database-min')) || 0,
      databaseMax: parseInt($(el).attr('data-database-max')) || 128,
      databaseReserved: parseInt($(el).attr('data-database-reserved')) || 0,
      databaseScaling: parseInt($(el).attr('data-database-scaling')) || 0
    });

    if ($(el).find('.calculator-wrapper').length > 0) {
      $(el).find('.calculator-wrapper').replaceWith(sHtml);
    } else {
      $(el).append(sHtml);
    }

    $(el).attr('data-mode', 'appserver');
    $(el).attr('data-period', period);
    $(el).find('input[value=' + period + ']').attr('checked', 'checked').change();
    var sKey = window.pricing[$(el).attr('data-key')],
        tariffPlans = sKey.tariffPlans;
    console.log(window.pricing);

    for (var i = 0, oHoster; oHoster = oHosters[i]; i++) {
      if ($(el).attr('data-key') === oHoster.key) {
        $(el).attr('data-currency', oHoster.currencyCode);
      }
    }

    if (tariffPlans.length > 0) {
      $.each(tariffPlans, function () {
        if (this.type.toLowerCase() === 'fixed') {
          fixed = this;
        }

        if (this.type.toLowerCase() === 'flexible') {
          dynamic = this;
        }

        if (this.type.toLowerCase() === 'network') {
          network = this;
        }

        if (this.type.toLowerCase() === 'storage') {
          storage = this;
        }

        if (this.keyword.toLowerCase() === 'ip') {
          ip = this;
        }
      });
    }

    $(el).find('.current-switcher').each(function () {
      var $this = $(this),
          numberOfOptions = $(this).children('option').length;
      $this.addClass('select-hidden');
      $this.wrap('<div class="select"></div>');
      $this.after('<div class="select-styled"></div>');
      var $styledSelect = $this.next('div.select-styled');
      $styledSelect.html($this.children('option:selected').attr('data-sign') + ' - ' + $this.children('option:selected').html());
      var $list = $('<ul />', {
        'class': 'select-options'
      }).insertAfter($styledSelect);

      for (var i = 0; i < numberOfOptions; i++) {
        var classes = '';

        if ($this.children('option').eq(i).text() === $this.children('option:selected').text()) {
          classes = 'current-currency';
        }

        var li = $('<li />', {
          text: $this.children('option').eq(i).html(),
          rel: $this.children('option').eq(i).val(),
          class: classes
        }).appendTo($list);
        $('<span />', {
          class: 'currency-sign',
          text: $this.children('option').eq(i).attr('data-sign') + ' - '
        }).prependTo(li);
        $('<span />', {
          class: 'currency-name',
          text: $this.children('option').eq(i).attr('data-name')
        }).appendTo(li);
      }

      var $listItems = $list.children('li');
      $styledSelect.click(function (e) {
        e.stopPropagation();
        $('div.select-styled.active').not(this).each(function () {
          $(this).removeClass('active').next('ul.select-options').hide();
        });
        $(this).toggleClass('active').next('ul.select-options').toggle();
      });
      $listItems.click(function (e) {
        $list.find('.current-currency').removeClass('current-currency');
        $(this).addClass('current-currency');
        e.stopPropagation();
        $styledSelect.html($(this).html()).removeClass('active');
        $this.val($(this).attr('rel')).change();
        $list.hide();
      });
      $(document).click(function () {
        $styledSelect.removeClass('active');
        $list.hide();
      });
    });

    $add.Slider = function (el, settings) {
      var $el = $(el);
      var s = {};
      if ($el.attr("name")) s.name = $el.attr("name");
      if ($el.attr("class")) s.class = $el.attr("class");
      if ($el.attr("id")) s.id = $el.attr("id");
      if ($el.attr("value")) s.value = $el.attr("value");
      if ($el.attr("min")) s.min = $el.attr("min");
      if ($el.attr("max")) s.max = $el.attr("max");
      if ($el.attr("step")) s.step = $el.attr("step");
      s.storage = storage;
      s.ip = ip;
      s.fixed = fixed;
      s.dynamic = dynamic;
      s.network = network;
      settings = $.extend(s, $el.data(), settings);
      var S = new $add.SliderObj(settings);
      S.render($el, "replace");
      return S;
    };

    var appserverslider = $add.Slider($(el).find('.appserver-range input'), ''),
        balancerslider = $add.Slider($(el).find('.balancer-range input'), ''),
        databaseslider = $add.Slider($(el).find('.database-range input'), '');
    var sliders = {
      'appserver': appserverslider,
      'balancer': balancerslider,
      'database': databaseslider
    };
    var defaultOptions = {
      "storage": 10,
      "ip": 1,
      "traffic": 10,
      "balancer-nodes": 0,
      "appserver-nodes": 1,
      "database-nodes": 0
    };
    $.each(defaultOptions, function (key, value) {
      var digit = el[0].querySelectorAll('[name=' + key + ']')[0];

      if (el[0].getAttribute('data-' + key)) {
        digit.value = el[0].getAttribute('data-' + key);

        if (+el[0].getAttribute('data-' + key) > +digit.getAttribute('max')) {
          el[0].setAttribute('data-' + key, digit.getAttribute('max'));
          digit.value = el[0].getAttribute('data-' + key);
        }
      } else {
        el[0].setAttribute('data-' + key, value);
        digit.value = el[0].getAttribute('data-' + key);
      }
    });
    $(el).find('input[name*="mode"]').click(function (e) {
      changeMode($(this).val(), el);
      setMinValues(el, $(el).attr('data-mode'));
      setMaxValues(el, $(el).attr('data-mode'));
    });
    $(el).find('input[name*="mode"][value=appserver]').click();
    $(el).find('.min-block-decrease').click(function (e) {
      e.preventDefault();
      var slider = sliders[$(el).attr('data-mode')];
      decreaseReserved(slider);
    });
    $(el).find('.min-block-increase').click(function (e) {
      e.preventDefault();
      var slider = sliders[$(el).attr('data-mode')];
      increaseReserved(slider);
    });
    $(el).find('.max-block-decrease').click(function (e) {
      e.preventDefault();
      var slider = sliders[$(el).attr('data-mode')];
      decreaseScaling(slider);
    });
    $(el).find('.max-block-increase').click(function (e) {
      e.preventDefault();
      var slider = sliders[$(el).attr('data-mode')];
      increaseScaling(slider);
    });
    $(el).find('.digit, .node-count input').change(function (e) {
      var digit = $(this),
          type = digit.attr('name');
      el[0].setAttribute('data-' + type, this.value);

      if (parseInt(digit.val()) > parseInt(digit.attr('max'))) {
        digit.val(digit.attr('max')).change();
      }

      if (parseInt(digit.val()) < 0 || digit.val() === '') {
        digit.val(0).change();
      }

      setPrice(fixed.tiers, dynamic.tiers, el, storage.tiers, ip.tiers, network.tiers);
    });
    $(el).find('.plus').click(function (e) {
      e.preventDefault();
      increaseBlockDigit(this);
    });
    $(el).find('.minus').click(function (e) {
      e.preventDefault();
      decreaseBlockDigit(this);
    });
    $(el).find('.plus-node').click(function (e) {
      e.preventDefault();
      increseNode(this);
    });
    $(el).find('.minus-node').click(function (e) {
      e.preventDefault();
      decreaseNode(this);
    });
    $(el).find('.calculator-right input').click(function (e) {
      $(el).attr('data-period', $(this).val());
      setPrice(fixed.tiers, dynamic.tiers, el, storage.tiers, ip.tiers, network.tiers);
    });
    $(el).find('.current-switcher').change(function (e) {
      setPrice(fixed.tiers, dynamic.tiers, el, storage.tiers, ip.tiers, network.tiers);
    });
    $(calculatorTag).removeClass(sCssLoading);
  }

  function increseNode(clickedElement) {
    var digit = $(clickedElement).closest('.node-count').find('input');
    digit.val(parseInt(digit.val()) + 1).change();
  }

  function decreaseNode(clickedElement) {
    var digit = $(clickedElement).closest('.node-count').find('input');

    if (parseInt(digit.val()) > 0) {
      digit.val(parseInt(digit.val()) - 1).change();
    }
  }

  function decreaseReserved(oSlider) {
    var l = oSlider.value.split(',')[0];
    var r = oSlider.value.split(',')[1];

    if (l > oSlider._settings.min) {
      l--;
      oSlider.value = '' + l + ',' + r + '';
    }
  }

  function increaseReserved(oSlider) {
    var l = oSlider.value.split(',')[0];
    var r = oSlider.value.split(',')[1];

    if (l < oSlider._settings.max) {
      if (l === r) {
        r++;
      }

      l++;
      oSlider.value = '' + l + ',' + r + '';
    }
  }

  function decreaseScaling(oSlider) {
    var l = oSlider.value.split(',')[0];
    var r = oSlider.value.split(',')[1];

    if (r > oSlider._settings.min) {
      if (l === r) {
        l--;
      }

      r--;
      oSlider.value = '' + l + ',' + r + '';
    }
  }

  function increaseScaling(oSlider) {
    var l = oSlider.value.split(',')[0];
    var r = oSlider.value.split(',')[1];

    if (r < oSlider._settings.max) {
      r++;
      oSlider.value = '' + l + ',' + r + '';
    }
  }

  function increaseBlockDigit(clickedElement) {
    var digit = $(clickedElement).closest('.inner').find('.digit');
    digit.val(parseInt(digit.val()) + 1).change();
  }

  function decreaseBlockDigit(clickedElement) {
    var digit = $(clickedElement).closest('.inner').find('.digit');

    if (parseInt(digit.val()) > 0) {
      digit.val(parseInt(digit.val()) - 1).change();
    }
  }

  function importPricing() {
    $.ajax({
      type: "GET",
      url: '//platforms-info.jelastic.com/api/GetPricings',
      dataType: "json",
      success: function success(pricingJSON) {
        if (pricingJSON.result === 0) {
          window.pricing = pricingJSON.response.pricings;
          $.ajax({
            type: "GET",
            url: '//platforms-info.jelastic.com/api/GetCurrency',
            dataType: "json",
            success: function success(currencyJSON) {
              if (currencyJSON.result === 0) {
                window.currency = currencyJSON.response.objects;
                JApp.loadHosters(function (hosters) {
                  $.each(hosters, function (index) {
                    if (this.keyword === 'servint') {
                      hosters.splice(index, 1);
                      return false;
                    }
                  });
                  oHosters = hosters;

                  if (calculatorTag.length > 0) {
                    $.each(calculatorTag, function (e) {
                      $(this).attr('data-key') ? renderCalculator($(this)) : calculatorsWithSelector.push(this);
                    });
                  }

                  fnSetDefault();
                });
              }
            },
            error: function error(response) {
              console.log(response);
            }
          });
        }
      },
      error: function error(response) {
        console.log(response);
      }
    });
  }

  importPricing();
  $(window).resize(function () {
    $('.j-calculator[data-mode]').each(function () {
      setMinValues(this, $(this).attr('data-mode'));
      setMaxValues(this, $(this).attr('data-mode'));
    });
  });

  function uniqid() {
    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var c = Date.now() / 1000;
    var d = c.toString(16).split(".").join("");

    while (d.length < 14) {
      d += "0";
    }

    var e = "";

    if (b) {
      e = ".";
      var f = Math.round(Math.random() * 100000000);
      e += f;
    }

    return a + d + e;
  }

  function changeMode(value, el) {
    $(el).attr('data-mode', value);
  }

  function setReservedCloudlets(cloudlets, el, type) {
    $(el).attr('data-' + type + '-reserved', cloudlets);
    setMinValues(el, type);
  }

  function setScalingCloudlets(cloudlets, el, type) {
    if (cloudlets === 0) {
      $(el).find('label[for*=' + type + ']').removeClass('active');
      $(el).find('label[for*=' + type + '] .node-count input').val(0).change();
    } else {
      if (!$(el).find('label[for*=' + type + ']').hasClass('active')) {
        $(el).find('label[for*=' + type + '] .node-count input').val(1).change();
      }

      $(el).find('label[for*=' + type + ']').addClass('active');
    }

    $(el).attr('data-' + type + '-scaling', cloudlets);
    setMaxValues(el, type);
  }

  function getReservedCloudlets(el, type) {
    return parseInt($(el).attr('data-' + type + '-reserved'));
  }

  function getScalingCloudlets(el, type) {
    return parseInt($(el).attr('data-' + type + '-scaling'));
  }

  function convertMib(value) {
    value *= 128;
    return value > 1000 ? parseFloat(value / 1024).toFixed(2) + " GiB" : value + " MiB";
  }

  function convertMhz(value) {
    value *= 400;
    return value > 1000 ? parseFloat(value / 1000).toFixed(2) + " GHz" : value + " MHz";
  }

  function changePricePeriod(sValue, sPeriod) {
    switch (sPeriod) {
      case 'hourly':
        sValue = Math.round(sValue * 100000) / 100000;
        break;

      case 'monthly':
        sValue = (sValue * 730).toFixed(2);
        break;
    }

    return sValue;
  }

  function checkStoragePrice(sValue, tiers) {
    sValue = parseInt(sValue);
    var price = tiers[0].price;

    if (sValue < tiers[0].value) {
      return 0;
    }

    for (var i = 0; i < tiers.length; i++) {
      if (!tiers[i + 1]) {
        if (tiers[tiers.length - 1].free > 0 && sValue <= tiers[tiers.length - 1].free) {
          return 0;
        } else {
          return (sValue - tiers[tiers.length - 1].free) * tiers[tiers.length - 1].price;
        }
      } else {
        if (sValue >= tiers[i].value && sValue < tiers[i + 1].value) {
          if (tiers[i].free > 0 && sValue <= tiers[i].free) {
            return 0;
          } else {
            price = tiers[i].price;
            return (sValue - tiers[i].free) * price;
          }
        }
      }
    }
  }

  function checkIpPrice(sValue, tiers) {
    sValue = parseInt(sValue);
    var price = tiers[0].price;

    if (sValue < tiers[0].value) {
      return 0;
    }

    for (var i = 0; i < tiers.length; i++) {
      if (!tiers[i + 1]) {
        if (tiers[tiers.length - 1].free > 0 && sValue <= tiers[tiers.length - 1].free) {
          return 0;
        } else {
          price = tiers[tiers.length - 1].price;
        }
      } else {
        if (sValue >= tiers[i].value && sValue < tiers[i + 1].value) {
          if (tiers[i].free > 0 && sValue <= tiers[i].free) {
            return 0;
          } else {
            price = tiers[i].price;
            return sValue * price;
          }
        }
      }
    }

    return sValue * price;
  }

  function checkTrafficPrice(sValue, tiers) {
    sValue = parseInt(sValue);
    var different = 0;

    if (sValue < tiers[0].value) {
      return 0;
    }

    for (var i = 0; i < tiers.length; i++) {
      different = sValue - tiers[i].value;

      if (!tiers[i + 1]) {
        if (tiers[tiers.length - 1].free > 0) {
          var val = sValue - tiers[tiers.length - 1].free;

          if (val < 0) {
            val = 0;
          }

          return val * tiers[tiers.length - 1].price;
        } else {
          return tiers[tiers.length - 1].price * sValue;
        }
      } else {
        if (sValue >= tiers[i].value && sValue < tiers[i + 1].value) {
          if (tiers[i].free > 0) {
            var val = sValue - tiers[i].free;

            if (val < 0) {
              val = 0;
            }

            return val * tiers[i].price;
          } else {
            return sValue * tiers[i].price;
          }
        }
      }
    }
  }

  function setPrice(reservedTiers, scalingTiers, el, storageTiers, ipTiers, trafficTiers) {
    var currentCurrency = '',
        originalCurrency = '';
    currency = $(el).find('.current-switcher').val();
    $.each(window.currency, function (index) {
      if (currency === this.code) {
        currentCurrency = this;
      }

      if ($(el).attr('data-currency') === this.code) {
        originalCurrency = this;
      }
    });
    var balancerNodes = $(el).attr('data-balancer-nodes'),
        appServerNodes = $(el).attr('data-appserver-nodes'),
        databaseNodes = $(el).attr('data-database-nodes'),
        minBalancerPrice = checkPrice(parseInt(getReservedCloudlets(el, 'balancer')) * parseInt(balancerNodes), reservedTiers),
        minAppserverPrice = checkPrice(parseInt(getReservedCloudlets(el, 'appserver')) * parseInt(appServerNodes), reservedTiers),
        minDatabasePrice = checkPrice(parseInt(getReservedCloudlets(el, 'database')) * parseInt(databaseNodes), reservedTiers),
        maxBalancerPrice = checkMaxPrice(parseInt(getScalingCloudlets(el, 'balancer')) * parseInt(balancerNodes), scalingTiers, parseInt(getReservedCloudlets(el, 'balancer')) * parseInt(balancerNodes), reservedTiers),
        maxAppserverPrice = checkMaxPrice(parseInt(getScalingCloudlets(el, 'appserver')) * parseInt(appServerNodes), scalingTiers, parseInt(getReservedCloudlets(el, 'appserver')) * parseInt(appServerNodes), reservedTiers),
        maxDatabasePrice = checkMaxPrice(parseInt(getScalingCloudlets(el, 'database')) * parseInt(databaseNodes), scalingTiers, parseInt(getReservedCloudlets(el, 'database')) * parseInt(databaseNodes), reservedTiers),
        storagePrice = checkStoragePrice($(el).attr('data-storage'), storageTiers),
        ipPrice = checkIpPrice($(el).attr('data-ip'), ipTiers),
        trafficPrice = checkTrafficPrice($(el).attr('data-traffic'), trafficTiers); // TRAFFIC

    trafficPrice = toCurrency(trafficPrice, originalCurrency.rate.USD, currentCurrency.rate.USD);

    if ($(el).attr('data-period') === 'hourly') {
      trafficPrice = trafficPrice / 730;
    } // MIN PRICE


    var minPrice = minBalancerPrice + minAppserverPrice + minDatabasePrice;
    minPrice = minPrice + storagePrice + ipPrice;
    minPrice = toCurrency(minPrice, originalCurrency.rate.USD, currentCurrency.rate.USD);
    minPrice = changePricePeriod(minPrice, $(el).attr('data-period'));
    minPrice = +minPrice + +trafficPrice;

    switch ($(el).attr('data-period')) {
      case 'hourly':
        minPrice = Math.round(minPrice * 1000) / 1000;
        break;

      case 'monthly':
        minPrice = minPrice.toFixed(2);
        break;
    }

    $(el).find('.start-price .price').html(minPrice); // MAX PRICE

    var maxPrice = maxBalancerPrice + maxAppserverPrice + maxDatabasePrice;
    maxPrice = maxPrice + storagePrice + ipPrice;
    maxPrice = toCurrency(maxPrice, originalCurrency.rate.USD, currentCurrency.rate.USD);
    maxPrice = changePricePeriod(maxPrice, $(el).attr('data-period'));
    maxPrice = +maxPrice + +trafficPrice;

    if (+maxPrice < +minPrice) {
      maxPrice = minPrice;
    }

    switch ($(el).attr('data-period')) {
      case 'hourly':
        maxPrice = Math.round(maxPrice * 1000) / 1000;
        break;

      case 'monthly':
        maxPrice = parseFloat(maxPrice).toFixed(2);
        break;
    }

    $(el).find('.max-price .price').html(maxPrice); // RESERVED COUNTS

    var reservedBalancerCloudlets = parseInt(getReservedCloudlets(el, 'balancer')) * parseInt(balancerNodes),
        reservedAppServerCloudlets = parseInt(getReservedCloudlets(el, 'appserver')) * parseInt(appServerNodes),
        reservedDbCloudlets = parseInt(getReservedCloudlets(el, 'database')) * parseInt(databaseNodes),
        reservedCloudletsMib = convertMib(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets),
        reservedCloudletsGHz = convertMhz(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets);
    $(el).find('.reserved-totals .gibs').html(reservedCloudletsMib);
    $(el).find('.reserved-totals .ghz').html(reservedCloudletsGHz);
    $(el).find('.reserved-totals .balancer').html(reservedBalancerCloudlets);
    $(el).find('.reserved-totals .appserver').html(reservedAppServerCloudlets);
    $(el).find('.reserved-totals .database').html(reservedDbCloudlets);
    $(el).find('.reserved-totals .cloudlets-total').html(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets);
    var charsLength = reservedBalancerCloudlets + '' + reservedAppServerCloudlets + '' + reservedDbCloudlets;

    if (charsLength.length >= 8) {
      $(el).find('.calculator-right').addClass('new-row');
    } else {
      $(el).find('.calculator-right').removeClass('new-row');
    } // SCALING COUNTS


    var scalingBalancerCloudlets = parseInt(getScalingCloudlets(el, 'balancer')) * parseInt(balancerNodes),
        scalingAppServerCloudlets = parseInt(getScalingCloudlets(el, 'appserver')) * parseInt(appServerNodes),
        scalingDbCloudlets = parseInt(getScalingCloudlets(el, 'database')) * parseInt(databaseNodes),
        scalingCloudletsMib = convertMib(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets),
        scalingCloudletsGHz = convertMhz(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets);
    $(el).find('.scaling-totals .gibs').html(scalingCloudletsMib);
    $(el).find('.scaling-totals .ghz').html(scalingCloudletsGHz);
    $(el).find('.scaling-totals .balancer').html(scalingBalancerCloudlets);
    $(el).find('.scaling-totals .appserver').html(scalingAppServerCloudlets);
    $(el).find('.scaling-totals .database').html(scalingDbCloudlets);
    $(el).find('.scaling-totals .cloudlets-total').html(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets);
    charsLength = scalingBalancerCloudlets + '' + scalingAppServerCloudlets + '' + scalingDbCloudlets;

    if (!$(el).find('.calculator-right').hasClass('new-row')) {
      if (charsLength.length >= 8) {
        $(el).find('.calculator-right').addClass('new-row');
      } else {
        $(el).find('.calculator-right').removeClass('new-row');
      }
    }
  }

  function checkPrice(cloudlets, tiers) {
    if (cloudlets < 1) {
      return 0;
    }

    for (var i = 0; i < tiers.length; i++) {
      var freeCloudlets = 0;

      if (i !== tiers.length - 1) {
        if (cloudlets >= tiers[i].value && cloudlets < tiers[i + 1].value) {
          freeCloudlets = cloudlets - tiers[i].value;

          if (freeCloudlets <= tiers[i].free) {
            return tiers[i].price * tiers[i].value;
          } else {
            return cloudlets * tiers[i].price;
          }
        }
      } else {
        freeCloudlets = cloudlets - tiers[tiers.length - 1].value;

        if (freeCloudlets <= tiers[tiers.length - 1].free) {
          return tiers[tiers.length - 1].price * tiers[tiers.length - 1].value;
        } else {
          return tiers[tiers.length - 1].price * cloudlets;
        }
      }
    }
  }

  function checkMaxPrice(cloudlets, tiers, minCloudlets, minTiers) {
    if (cloudlets === 0) {
      return 0;
    }

    var reservedPrice = checkPrice(minCloudlets, minTiers),
        scalingCloudlets = cloudlets - minCloudlets;

    for (var i = 0; i < tiers.length; i++) {
      if (i !== tiers.length - 1) {
        if (cloudlets >= tiers[i].value && cloudlets < tiers[i + 1].value) {
          if (scalingCloudlets <= tiers[i].free) {
            return reservedPrice;
          } else {
            return scalingCloudlets * tiers[i].price + reservedPrice;
          }
        }
      } else {
        if (scalingCloudlets <= tiers[tiers.length - 1].free) {
          return reservedPrice;
        } else {
          return tiers[tiers.length - 1].price * scalingCloudlets + reservedPrice;
        }
      }
    }
  }

  function toCurrency(nValue, sFrom, sTo) {
    return sFrom / sTo * nValue;
  }

  function setMinValues(el, type) {
    var value = getReservedCloudlets(el, type); // render line from dot to range

    var leftRange = $(el).find('.' + type + '-range .addui-slider-handle').eq(0),
        leftDot = $(el).find('.' + type + '-range .reserved .dot');
    var distance = leftRange.offset().left - $(leftDot).offset().left + $(leftDot).outerWidth() + 10;

    if (distance > 0) {
      $(leftDot).html('<span class="line more" style="width:' + (distance + 2) + 'px"></span>');
    } else {
      $(leftDot).html('<span class="line less" style="width:' + Math.abs(distance) + 'px"></span>');
    } // change reserved cloudlets


    var mib = convertMib(value);
    var mhz = convertMhz(value);
    $(el).find('.' + type + '-range .min-block .digits').html('<span>' + mib + '</span><span>' + mhz + '</span>');
  }

  function setMaxValues(el, type) {
    var value = getScalingCloudlets(el, type); // render line from dot to range

    var rightRange = $(el).find('.' + type + '-range .addui-slider-handle').eq(1),
        rightDot = $(el).find('.' + type + '-range .sl .dot');
    var distance = rightRange.offset().left - $(rightDot).offset().left + $(rightDot).outerWidth() + 10;

    if (distance > 0) {
      $(rightDot).html('<span class="line more" style="width:' + (distance + 2) + 'px"></span>');
    } else {
      $(rightDot).html('<span class="line less" style="width:' + Math.abs(distance) + 'px"></span>');
    } // change scaling limits


    var mib = convertMib(value);
    var mhz = convertMhz(value);
    $(el).find('.' + type + '-range .max-block .digits').html('<span>' + mib + '</span><span>' + mhz + '</span>');
  }

  fnSetDefault = function fnSetDefault() {
    var sHosterCriteria = uniqid();

    if (JApp.isLoadedDefHoster()) {
      return fnInitDefaultHoster();
    } else {
      return JApp.loadDefaultHoster(fnInitDefaultHoster, sHosterCriteria);
    }

    bInitDefCor = false;
  };

  fnInitDefaultHoster = function fnInitDefaultHoster(sHoster) {
    sCurrentHoster = sHoster || JApp.getDefaultHoster();

    if (calculatorsWithSelector.length > 0) {
      $.each(calculatorsWithSelector, function () {
        renderHosterSelector($(this));
        renderCalculator($(this));
      });
    }
  };

  $(document).on('change', '.hoster-selector--select', function (e) {
    var calculatorElement = $(this).closest(calculatorTag);
    sCurrentHoster = $(this).val();
    renderHosterSelector(calculatorElement);
    renderCalculator(calculatorElement);
  });
  if ($add === undefined) var $add = {
    version: {},
    auto: {
      disabled: false
    }
  };
  $add.version.Slider = "2.0.1";

  $add.SliderObj = function (settings) {
    Obj.apply(this);

    function toNearest(num, x) {
      return Math.round(num * (1 / x)) / (1 / x);
    }

    function betterParseFloat(t) {
      return isNaN(parseFloat(t)) && t.length > 0 ? betterParseFloat(t.substr(1)) : parseFloat(t);
    }

    ;
    this._settings = {
      direction: "horizontal",
      min: 0,
      max: 100,
      step: 0.1,
      value: 50,
      formatter: function formatter(x) {
        if ((this._settings.step + "").indexOf(".") > -1) var digits = (this._settings.step + "").split(".").pop().length;else var digits = 0;
        var v = betterParseFloat(x);

        if (x < 0) {
          var neg = true;
          x = 0 - x;
        } else {
          var neg = false;
        }

        if (isNaN(x)) {
          return "NaN";
        }

        var whole = Math.floor(x);
        var dec = x - whole;
        dec = Math.round(dec * Math.pow(10, digits));
        dec = dec + "";

        while (dec.length < digits) {
          dec = "0" + dec;
        }

        return (neg ? "-" : "") + whole + (digits > 0 ? "." + dec : "");
      },
      timeout: 2000,
      range: false,
      id: false,
      name: "",
      class: "",
      fixed: "",
      dynamic: ""
    };
    Object.defineProperty(this, "settings", {
      get: function get() {
        this.trigger("getsetting settings", this._settings);
        return this._settings;
      },
      set: function set(newSettings) {
        this._settings = $.extend(this._settings, settings);
        this.trigger("setsettings settings", this._settings);
        this.refresh();
      }
    });
    Object.defineProperty(this, "value", {
      get: function get() {
        this.trigger("getvalue value", this._settings.value);
        return this._settings.value;
      },
      set: function set(newVal) {
        var self = this;
        this._settings.value = newVal;

        this._elements.find(".addui-slider-input").val(this._settings.value);

        if (!this._settings.range) {
          var offset = betterParseFloat(this._settings.value) - this._settings.min;

          var per = toNearest(offset, this._settings.step) / (this._settings.max - this._settings.min) * 100;

          if (this._settings.direction == "vertical") {
            this._elements.find(".addui-slider-handle").css("bottom", per + "%");

            this._elements.find(".addui-slider-range").css("height", per + "%");

            this._elements.find(".addui-slider-range").css("bottom", "0%");
          } else {
            this._elements.find(".addui-slider-handle").css("left", per + "%");

            this._elements.find(".addui-slider-range").css("width", per + "%");
          }

          this._elements.find(".addui-slider-value span").html(toFunc(this._settings.formatter).call(this, this._settings.value));
        } else {
          var l = toNearest(parseFloat(this._settings.value.split(",")[0]), this._settings.step);
          var h = toNearest(parseFloat(this._settings.value.split(",")[1]), this._settings.step);
          var range = this._settings.max - this._settings.min;
          var offsetL = l - this._settings.min;
          var offsetH = h - this._settings.min;
          var lPer = offsetL / range * 100;
          var hPer = offsetH / range * 100;

          this._elements.each(function (i, el) {
            var $el = $(el),
                calc = $el.closest('.j-calculator'),
                type = $($el.closest('[class*="-range"'))[0].className.replace('-range', '');

            if (self._settings.direction == "vertical") {
              $el.find(".addui-slider-handle").eq(0).css("bottom", lPer + "%");
              $el.find(".addui-slider-handle").eq(1).css("bottom", hPer + "%");
              $el.find(".addui-slider-range").css("bottom", lPer + "%").css("height", hPer - lPer + "%");
            } else {
              $el.find(".addui-slider-start-distance").css("width", "calc(" + lPer + "% + 30px)");
              $el.find(".addui-slider-handle").eq(0).css("left", lPer + "%");
              $el.find(".addui-slider-handle").eq(1).css("left", hPer + "%");
              $el.find(".addui-slider-range").css("left", lPer + "%").css("width", hPer - lPer + "%");
              $el.find(".addui-slider-distance").css("width", "calc(" + (100 - hPer) + "% + 31px)");
            }

            $('.' + type + '-range .reserved-cloudlets').html(toFunc(self._settings.formatter).call(self, l) + ' cloudlets');
            $('.' + type + '-range .scaling-cloudlets').html(toFunc(self._settings.formatter).call(self, h) + ' cloudlets'); // $el.find(".addui-slider-handle").eq(0).find(".addui-slider-value span").html(toFunc(self._settings.formatter).call(self, l));
            // $el.find(".addui-slider-handle").eq(1).find(".addui-slider-value span").html(toFunc(self._settings.formatter).call(self, h));

            setReservedCloudlets(l, calc, type);
            setScalingCloudlets(h, calc, type);
            setTimeout(function () {
              setPrice(self._settings.fixed.tiers, self._settings.dynamic.tiers, calc, self._settings.storage.tiers, self._settings.ip.tiers, self._settings.network.tiers);
            }, 100);
          });
        }
      }
    });

    this.renderer = function () {
      var self = this;
      var $slider = $("<div class='addui-slider addui-slider-" + this._settings.direction + (this._settings.range ? " addui-slider-isrange" : "") + " " + this._settings.class + "' " + (this._settings.id ? "id='" + this._settings.id + "'" : "") + "></div>");
      var $input = $("<input class='addui-slider-input' type='hidden' name='" + this._settings.name + "' value='" + this._settings.value + "' />").appendTo($slider);
      var $track = $("<div class='addui-slider-track'></div>").appendTo($slider);
      var $range = $("<div class='addui-slider-range'></div>").appendTo($track);

      if (!this._settings.range) {
        var dragHandler = function dragHandler(e) {
          e.preventDefault();

          if (self._settings.direction == "vertical") {
            if (e.type == "touchmove") var y = e.originalEvent.changedTouches[0].pageY;else var y = e.pageY;
            var sliderY = $slider.offset().top + $slider.height();
            var offsetY = sliderY - y;
            var offsetPer = offsetY / $slider.height() * 100;
          } else {
            if (e.type == "touchmove") var x = e.originalEvent.changedTouches[0].pageX;else var x = e.pageX;
            var sliderX = $slider.offset().left;
            var offsetX = x - sliderX;
            var offsetPer = offsetX / $slider.width() * 100;
          }

          var val = toNearest(offsetPer / 100 * (self._settings.max - self._settings.min), self._settings.step) + self._settings.min;

          val = Math.min(self._settings.max, Math.max(self._settings.min, val));
          self.value = toNearest(val, self._settings.step);
        };

        var dragStopHandler = function dragStopHandler(e) {
          $(window).off("mousemove touchmove", dragHandler);
          activeTimer = setTimeout(function () {
            $handle.removeClass("addui-slider-handle-active");
          }, self._settings.timeout);
        };

        var $handle = $("<div class='addui-slider-handle'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
        var activeTimer = null;
        ;
        ;
        $handle.on("mousedown touchstart", function (e) {
          clearTimeout(activeTimer);
          $handle.addClass("addui-slider-handle-active");
          $(window).on("mousemove touchmove dragmove", dragHandler);
          $(window).one("mouseup touchend", dragStopHandler);
        });
        $slider.on("click", function (e) {
          e.preventDefault();

          if (self._settings.direction == "vertical") {
            if (e.type == "touchmove") var y = e.originalEvent.changedTouches[0].pageY;else var y = e.pageY;
            var sliderY = $slider.offset().top + $slider.height();
            var offsetY = sliderY - y;
            var offsetPer = offsetY / $slider.height() * 100;
          } else {
            if (e.type == "touchmove") var x = e.originalEvent.changedTouches[0].pageX;else var x = e.pageX;
            var sliderX = $slider.offset().left;
            var offsetX = x - sliderX;
            var offsetPer = offsetX / $slider.width() * 100;
          }

          var val = toNearest(offsetPer / 100 * (self._settings.max - self._settings.min), self._settings.step) + self._settings.min;

          val = Math.min(self._settings.max, Math.max(self._settings.min, val));
          clearTimeout(activeTimer);
          $handle.addClass("addui-slider-handle-active");
          activeTimer = setTimeout(function () {
            $handle.removeClass("addui-slider-handle-active");
          }, self._settings.timeout);
          self.value = val;
        });
      } else {
        var dragHandler1 = function dragHandler1(e) {
          e.preventDefault();

          if (self._settings.direction == "vertical") {
            if (e.type == "touchmove") var y = e.originalEvent.changedTouches[0].pageY;else var y = e.pageY;
            var sliderY = $slider.offset().top + $slider.height();
            var offsetY = sliderY - y;
            var range = self._settings.max - self._settings.min;
            var offsetPer = offsetY / $slider.height() * 100;
          } else {
            if (e.type == "touchmove") var x = e.originalEvent.changedTouches[0].pageX;else var x = e.pageX;
            var sliderX = $slider.offset().left;
            var offsetX = x - sliderX;
            var range = self._settings.max - self._settings.min;
            var offsetPer = offsetX / $slider.width() * 100;
          }

          var offsetVal = offsetPer / 100 * range;
          var val = toNearest(offsetVal + self._settings.min, self._settings.step);
          val = Math.min(self._settings.max, Math.max(self._settings.min, val));
          var higherVal = toNearest(betterParseFloat(self._settings.value.split(',')[1]), self._settings.step);
          if (higherVal < val) higherVal = val;
          self.value = val + "," + higherVal;
        };

        var dragStopHandler1 = function dragStopHandler1(e) {
          $(window).off("mousemove touchmove", dragHandler1);
          activeTimer1 = setTimeout(function () {
            $handle1.removeClass("addui-slider-handle-active");
          }, self._settings.timeout);
        };

        var dragHandler2 = function dragHandler2(e) {
          e.preventDefault();

          if (self._settings.direction == "vertical") {
            if (e.type == "touchmove") var y = e.originalEvent.changedTouches[0].pageY;else var y = e.pageY;
            var sliderY = $slider.offset().top + $slider.height();
            var offsetY = sliderY - y;
            var offsetPer = offsetY / $slider.height() * 100;
          } else {
            if (e.type == "touchmove") var x = e.originalEvent.changedTouches[0].pageX;else var x = e.pageX;
            var sliderX = $slider.offset().left;
            var offsetX = x - sliderX;
            var offsetPer = offsetX / $slider.width() * 100;
          }

          var range = self._settings.max - self._settings.min;
          var offsetVal = offsetPer / 100 * range;
          var val = toNearest(offsetVal + self._settings.min, self._settings.step);
          val = Math.min(self._settings.max, Math.max(self._settings.min, val));
          var lowerVal = toNearest(betterParseFloat(self._settings.value.split(',')[0]), self._settings.step);
          if (lowerVal > val) lowerVal = val;
          self.value = lowerVal + "," + val;
        };

        var dragStopHandler2 = function dragStopHandler2(e) {
          $(window).off("mousemove touchmove", dragHandler2);
          activeTimer2 = setTimeout(function () {
            $handle2.removeClass("addui-slider-handle-active");
          }, self._settings.timeout);
        };

        var $startDistance = $("<div class='addui-slider-start-distance'></div>").appendTo($track);
        var $handle1 = $("<div class='addui-slider-handle addui-slider-handle-l'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
        var activeTimer1 = null;
        ;
        ;
        $handle1.on("mousedown touchstart", function (e) {
          clearTimeout(activeTimer1);
          $handle1.addClass("addui-slider-handle-active");
          $(window).on("mousemove touchmove dragmove", dragHandler1);
          $(window).one("mouseup touchend", dragStopHandler1);
        });
        var $handle2 = $("<div class='addui-slider-handle addui-slider-handle-h'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
        var activeTimer2 = null;
        var $distance = $("<div class='addui-slider-distance'></div>").appendTo($track);
        ;
        ;
        $handle2.on("mousedown touchstart", function (e) {
          clearTimeout(activeTimer2);
          $handle2.addClass("addui-slider-handle-active");
          $(window).on("mousemove touchmove dragmove", dragHandler2);
          $(window).one("mouseup touchend", dragStopHandler2);
        });
      }

      return $slider;
    };

    this.init = function (settings) {
      var self = this;
      this.settings = settings;

      if (!this._settings.range) {
        this._settings.value = Math.max(this._settings.min, Math.min(this._settings.max, betterParseFloat(this._settings.value)));
      } else {
        var val = this._settings.value + "";

        if (val.indexOf(",") > -1) {
          // Already has two values
          var values = val.split(",");
          var v1 = betterParseFloat(values[0]);
          v1 = Math.min(this._settings.max, Math.max(this._settings.min, v1));
          v1 = toNearest(v1, this._settings.step);
          var v2 = betterParseFloat(values[1]);
          v2 = Math.min(this._settings.max, Math.max(this._settings.min, v2));
          v2 = toNearest(v2, this._settings.step);
        } else {
          // Only has one value
          var val = toNearest(Math.max(this._settings.min, Math.min(this._settings.max, betterParseFloat(this._settings.value))), this._settings.step);
          var middle = (this._settings.max - this._settings.min) / 2;

          if (val < middle) {
            var v1 = val;
            var v2 = this._settings.max - val;
          } else {
            var v2 = val;
            var v1 = this._settings.min + val;
          }
        }

        if (v1 < v2) this._settings.value = v1 + "," + v2;else this._settings.value = v2 + "," + v1;
      }

      this.on("render", function () {
        self.value = self._settings.value;
      });
      this.trigger("init", {
        settings: this._settings
      });
    };

    this.init.apply(this, arguments);
  };
});