function generateGUID(){do var e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var n=16*Math.random()|0,t="x"==e?n:3&n|8;return t.toString(16)});while(GUIDList.indexOf(e)>-1);return e}function toFunc(e){if("function"==typeof e)return e;if("string"==typeof e){if(void 0!=window[e]&&"function"==typeof window[e])return window[e];try{return new Function(e)}catch(n){}}return function(){return e}}function Obj(){this._parent=null,this._handlers=[],this._onceHandlers=[],this._elements=$(),this.guid=generateGUID(),this.on=function(e,n){"function"==typeof e&&void 0===n&&(n=e,e="all"),e=e.toLowerCase().split(" ");for(var t=0;t<e.length;t++)this._handlers.push({event:e[t],handler:n});return this},this.once=function(e,n){"function"==typeof e&&void 0===n&&(n=e,e="all"),e=e.toLowerCase().split(" ");for(var t=0;t<e.length;t++)this._onceHandlers.push({event:e[t],handler:n});return this},this.off=function(e,n){if(void 0===n&&"function"==typeof e)for(var n=e,t=0;t<this._handlers.length;t++)this._handlers[t].handler==n&&this._handlers.splice(t--,1);else if(void 0===n&&"string"==typeof e){e=e.toLowerCase().split(" ");for(var t=0;t<this._handlers.length;t++)e.indexOf(this._handlers[t].event)>-1&&this._handlers.splice(t--,1)}else{e=e.toLowerCase().split(" ");for(var t=0;t<this._handlers.length;t++)e.indexOf(this._handlers[t].event)>-1&&this._handlers[t].handler==n&&this._handlers.splice(t--,1)}return this},this.offOnce=function(e,n){if(void 0===n&&"function"==typeof e)for(var n=e,t=0;t<this._onceHandlers.length;t++)this._onceHandlers[t].handler==n&&this._onceHandlers.splice(t--,1);else if(void 0===n&&"string"==typeof e){e=e.toLowerCase().split(" ");for(var t=0;t<this._onceHandlers.length;t++)e.indexOf(this._onceHandlers[t].event)>-1&&this._onceHandlers.splice(t--,1)}else{e=e.toLowerCase().split(" ");for(var t=0;t<this._onceHandlers.length;t++)e.indexOf(this._onceHandlers[t].event)>-1&&this._onceHandlers[t].handler==n&&this._onceHandlers.splice(t--,1)}return this},this.trigger=function(e,n){e=e.toLowerCase().split(" ");for(var t=0;t<this._handlers.length;t++)(e.indexOf(this._handlers[t].event)>-1||"all"==this._handlers[t].event)&&toFunc(this._handlers[t].handler).call(this,this._handlers[t].event,n);for(var t=0;t<this._onceHandlers.length;t++)(e.indexOf(this._onceHandlers[t].event)>-1||"all"==this._handlers[t].event)&&(toFunc(this._onceHandlers[t].handler).call(this,this._onceHandlers[t].event,n),this._onceHandlers.splice(t--,1));return this},this.renderer=function(){return $("<div class='Obj'></div>")},this.refresher=function(e){return this.renderer.apply(this)},this.destroyer=function(e){},this.render=function(e,n){var t=this;if(void 0===e)var e="body";if(void 0===n)var n="replace";else n=n.toLowerCase();var i=[].slice.call(arguments,2),r=this;return $(e).each(function(e,s){s=$(s);var h=$(t.renderer.apply(t,i));h.attr("guid",t.guid),t._elements=t._elements.add(h),"append"==n?s.append(h):"prepend"==n?s.prepend(h):"after"==n?s.after(h):"before"==n?s.before(h):"return"==n?r=h:"none"==n||(s.after(h),s.remove())}),this.trigger("render"),r},this.refresh=function(){for(var e=$(),n=0;n<this._elements.length;n++){var t=this._elements.eq(n),i=this.refresher.call(this,t);i?(i.attr("guid",this.guid),this._elements=this._elements.not(t),t.after(i),t.remove(),e=e.add(i)):e=e.add(t)}return this._elements=e,this},this.destroy=function(){var e=this;return this._elements.each(function(n,t){var i=$(t);e.destroyer.call(e,i)}),this._elements.remove(),this._elements=$(),delete Objs[this.guid],this},Objs[this.guid]=this}var GUIDList=[],Objs={};
var JApp = window.JApp || {};
$ = $ || jQuery;

window.JApp = (function (that) {
    var sDefaultHoster = "eapps",
        sLoadedDefHoster = '',
        oLoadedHosters = {};

    that.getDefaultHoster = function () {
        return sLoadedDefHoster || sDefaultHoster;
    };

    that.isLoadedDefHoster = function () {
        return sLoadedDefHoster.length !== 0;
    };

    that.getHosters = function () {
        return oLoadedHosters;
    };

    that.isLoadedHosters = function () {
        return Object.keys(oLoadedHosters).length !== 0;
    };


    that.url = {

        getPlatformsInfoHost: function () {
            return "//platforms-info.jelastic.com";
        },

        getUserDefHosterURL: function () {
            return that.url.getPlatformsInfoHost() + "/api/user/getdefhoster";
        },

        getHosters: function () {
            return "//platforms-info.jelastic.com/api/site/GetHosters";
        },

        getPrices: function () {
            return "//platforms-info.jelastic.com/api/GetPricings";
        },

        getCurrecies: function () {
            return "//platforms-info.jelastic.com/api/GetCurrency";
        }

    };

    that.loadHosters = function (fnCallback) {
        $.ajax({
            type: "GET",
            url: JApp.url.getHosters(),
            async: false,
            success: function (response) {
                var oResp = '';
                if (response.result === 0 && response.hosters) {
                    oLoadedHosters = response.hosters;

                    $.each(oLoadedHosters, function (index) {
                        if (this.keyword === 'servint') {
                            oLoadedHosters.splice(index, 1);
                            return false;
                        }
                    });

                    oLoadedHosters.sort(function (a, b) {
                        var nameA = a.keyword.toLowerCase(),
                            nameB = b.keyword.toLowerCase();
                        if (nameA < nameB)
                            return -1;
                        if (nameA > nameB)
                            return 1;
                        return 0;
                    });

                    if (fnCallback) {
                        fnCallback(oLoadedHosters);
                    }

                } else {
                    throw new Error('Can not get hosters');
                }


            }
        });
    };

    that.loadDefaultHoster = function (fnCallback, oCriteria) {

        oCriteria = oCriteria || {};

        $.ajax({
            type: "POST",
            url: JApp.url.getUserDefHosterURL(),
            data: {
                criteria: JSON.stringify(oCriteria)
            },
            async: false,
            success: function (response) {
                var oResp = jQuery.parseJSON(response) || {};

                if (oResp.result === 0 && oResp.response) {
                    oResp = oResp.response;
                }

                sLoadedDefHoster = oResp.hoster;

                if (fnCallback) {
                    fnCallback(sLoadedDefHoster);
                }

            },

            error: function (jqXHR, textStatus, errorThrown) {
                sLoadedDefHoster = sDefaultHoster;
                if (fnCallback) {
                    fnCallback();
                }
            }
        });
    };

    return that;
}(window.JApp || {}));

JApp.pricing = (function (that) {

    var oPricing = {},
        oCurrencies = {};

    that.getPricing = function () {
        return oPricing;
    };

    that.getCurrecies = function () {
        return oCurrencies;
    };

    that.isLoadedPricing = function () {
        return Object.keys(oPricing).length !== 0;
    };

    that.isLoadedCurrencies = function () {
        return Object.keys(oCurrencies).length !== 0;
    };

    that.loadCurrencies = function (fnCallback) {
        $.ajax({
            type: "GET",
            url: JApp.url.getCurrecies(),
            dataType: "json",
            async: false,
            success: function (currencyJSON) {
                if (currencyJSON.result === 0) {

                    oCurrencies = currencyJSON.response.objects;

                    oCurrencies.sort(function (a, b) {
                        var nameA = a.code.toLowerCase(),
                            nameB = b.code.toLowerCase();
                        if (nameA < nameB)
                            return -1;
                        if (nameA > nameB)
                            return 1;
                        return 0;
                    });

                    $.each(oCurrencies, function (index) {
                        if (this.code === 'USD' || this.code === 'EUR') {
                            oCurrencies.splice(0, 0, oCurrencies.splice(index, 1)[0]);
                        }
                    });

                    if (fnCallback) {
                        fnCallback(oCurrencies);
                    }
                }
            },
            error: function (response) {
                throw new Error(response);
            }
        });
    };

    that.loadPricings = function (fnCallback) {
        $.ajax({
            type: "GET",
            url: JApp.url.getPrices(),
            dataType: "json",
            async: false,
            success: function (pricingJSON) {
                if (pricingJSON.result === 0) {
                    oPricing = pricingJSON.response.pricings;

                    if (fnCallback) {
                        fnCallback(oPricing);
                    }

                } else {
                    throw new Error('Can not get pricing models');
                }
            },
            error: function (response) {
                throw new Error(response);
            }
        });
    };

    return that;
}(JApp.pricing || {}));

JApp.utils = (function (that) {

    that.uniqid = (function (a = "", b = false) {
        var c = Date.now() / 1000;
        var d = c.toString(16).split(".").join("");
        while (d.length < 14) {
            d += "0";
        }
        var e = "";
        if (b) {
            e = ".";
            var f = Math.round(Math.random() * 100000000);
            e += f;
        }
        return a + d + e;
    });

    return that;
}(JApp.utils || {}));

JApp.pricing = JApp.pricing || {};

JApp.pricing.Calculator = function (config) {

    var self = this;

    self.sCurrentHoster = 'servnet';
    self.oHosters = [];
    self.pricing = {};
    self.currencies = '';
    self.element = config.oElement;
    self.sKey = config.sKey;
    self.hosterCurrency = 'USD';
    self.oLanguages = [];
    self.startCurrency = '';
    self.localization = {
        txChoose: 'Choose Service Provider of Jelastic Public Cloud',
        txPerfomance: 'Perfomance',
        txSupport: 'Support',
        txLocation: 'Location',
        txServices: 'Advanced Services',
        balancerTxt: $(self.element).attr('data-balancer-tx') || 'Balancer',
        AppServerTxt: $(self.element).attr('data-appserver-tx') || 'App Server',
        DatabaseTxt: $(self.element).attr('data-db-tx') || 'Database',
        DiskTxt: $(self.element).attr('data-disk-tx') || 'Disk Space, GB',
        IpTxt: $(self.element).attr('data-ip-tx') || 'Public IP',
        TrafficTxt: $(self.element).attr('data-traffic-tx') || 'External Traffic, GB',
        TrafficTooltipTxt: $(self.element).attr('data-traffic-tooltip-tx') || 'Amount of external traffic <br> spent per month.',
        ReservedTxt: $(self.element).attr('data-reserved-tx') || 'Reserved',
        ReservedCloudletsTxt: $(self.element).attr('data-reserved-cloudlets-tx') || 'Reserved Cloudlets',
        ReservedDescriptionTxt: $(self.element).attr('data-reserved-tooltip-tx') || 'Reserve the cloudlets to pay a fixed price. The more you reserve, the bigger the discount is!',
        ScalingLimitTxt: $(self.element).attr('data-scaling-limit-tx') || 'Scaling Limit',
        ScalingDescriptionTxt: $(self.element).attr('data-scaling-tooltip-tx') || 'Define the maximum amount of resources for automatic vertical scaling based on load changes',
        totalTxt: $(self.element).attr('data-total-tx') || 'Total Cloudlets',
        hourlyTxt: $(self.element).attr('data-hourly-tx') || 'Per Hour',
        monthlyTxt: $(self.element).attr('data-monthly-tx') || 'Per Month',
        priceMinTxt: $(self.element).attr('data-price-min-tx') || 'Starting Price',
        priceMaxTxt: $(self.element).attr('data-price-max-tx') || 'Maximum Price',
        priceMaxDescrTxt: $(self.element).attr('data-price-max-descr-tx') || 'if all resources are fully used up to Scaling Limit',
        balancerMin: parseInt($(self.element).attr('data-balancer-min')) || 0,
        balancerMax: parseInt($(self.element).attr('data-balancer-max')) || 128,
        appServerMin: parseInt($(self.element).attr('data-appserver-min')) || 0,
        appServerMax: parseInt($(self.element).attr('data-appserver-max')) || 128,
        databaseMin: parseInt($(self.element).attr('data-database-min')) || 0,
        databaseMax: parseInt($(self.element).attr('data-database-max')) || 128,
    };
    self.fixed = '';
    self.dynamic = '';
    self.ip = '';
    self.network = '';
    self.storage = '';
    self.period = '';
    self.cloudlets = {
        balancer: {
            reserved: parseInt($(self.element).attr('data-balancer-reserved')) || 0,
            scaling: parseInt($(self.element).attr('data-balancer-scaling')) || 0,
            nodes: parseInt($(self.element).attr('data-balancer-nodes')) || 1,
        },
        appserver: {
            reserved: parseInt($(self.element).attr('data-appserver-reserved')) || 1,
            scaling: parseInt($(self.element).attr('data-appserver-scaling')) || 64,
            nodes: parseInt($(self.element).attr('data-appserver-nodes')) || 1,
        },
        database: {
            reserved: parseInt($(self.element).attr('data-database-reserved')) || 0,
            scaling: parseInt($(self.element).attr('data-database-scaling')) || 0,
            nodes: parseInt($(self.element).attr('data-database-nodes')) || 1,
        },
        storage: parseInt($(self.element).attr('data-storage')) || 10,
        ip: parseInt($(self.element).attr('data-ip')) || 1,
        traffic: parseInt($(self.element).attr('data-traffic')) || 10,
    };

    self.setReservedCloudlets = function (cloudlets, type) {
        self.cloudlets[type].reserved = cloudlets;
        self.setMinValues(type);
    };

    self.setScalingCloudlets = function (cloudlets, type) {
        if (cloudlets === 0) {
            $(self.element).find('label[for*=' + type + ']').removeClass('active');
            $(self.element).find('label[for*=' + type + '] .node-count input').val(0).change();
        } else {
            if (!$(self.element).find('label[for*=' + type + ']').hasClass('active')) {
                $(self.element).find('label[for*=' + type + '] .node-count input').val(self.cloudlets[type].nodes).change();
            }
            $(self.element).find('label[for*=' + type + ']').addClass('active');
        }

        self.cloudlets[type].scaling = cloudlets;

        self.setMaxValues(type);
    };

    self.convertMib = function (value) {
        value *= 128;
        return value > 1000 ? parseFloat(value / 1024).toFixed(2) + " GiB" : value + " MiB";
    };

    self.convertMhz = function (value) {
        value *= 400;
        return value > 1000 ? parseFloat(value / 1000).toFixed(2) + " GHz" : value + " MHz";
    };

    self.changePricePeriod = function (sValue) {
        switch (self.period) {
            case 'hourly':
                sValue = Math.round(sValue * 100000) / 100000;
                break;

            case 'monthly':
                sValue = (sValue * 730).toFixed(2);
                break
        }

        return sValue;
    };

    self.checkStoragePrice = function () {
        sValue = self.cloudlets.storage;
        var tiers = self.storage.tiers;
        price = tiers[0].price;

        if (sValue < tiers[0].value) {
            return 0;
        }

        for (var i = 0; i < tiers.length; i++) {
            if (!tiers[i + 1]) {
                if ((tiers[tiers.length - 1].free > 0) && (sValue <= tiers[tiers.length - 1].free)) {
                    return 0;
                } else {
                    return (sValue - tiers[tiers.length - 1].free) * tiers[tiers.length - 1].price;
                }
            } else {
                if ((sValue >= tiers[i].value) && (sValue < tiers[i + 1].value)) {
                    if ((tiers[i].free > 0) && (sValue <= tiers[i].free)) {
                        return 0;
                    } else {
                        price = tiers[i].price;
                        return (sValue - tiers[i].free) * price;
                    }
                }
            }
        }
    };

    self.checkIpPrice = function () {
        sValue = self.cloudlets.ip;
        var tiers = self.ip.tiers,
            price = tiers[0].price;

        if (sValue < tiers[0].value) {
            return 0;
        }

        for (var i = 0; i < tiers.length; i++) {
            if (!tiers[i + 1]) {
                if ((tiers[tiers.length - 1].free > 0) && (sValue <= tiers[tiers.length - 1].free)) {
                    return 0;
                } else {
                    price = tiers[tiers.length - 1].price;
                }
            } else {
                if ((sValue >= tiers[i].value) && (sValue < tiers[i + 1].value)) {
                    if ((tiers[i].free > 0) && (sValue <= tiers[i].free)) {
                        return 0;
                    } else {
                        price = tiers[i].price;
                        return sValue * price;
                    }
                }
            }
        }
        return sValue * price;
    };

    self.checkTrafficPrice = function () {

        sValue = self.cloudlets.traffic;
        var tiers = self.network.tiers;
        different = 0;

        if (sValue < tiers[0].value) {
            return 0;
        }

        for (var i = 0; i < tiers.length; i++) {
            different = sValue - tiers[i].value;

            if (!tiers[i + 1]) {
                if (tiers[tiers.length - 1].free > 0) {

                    var val = sValue - tiers[tiers.length - 1].free;
                    if (val < 0) {
                        val = 0;
                    }
                    return val * tiers[tiers.length - 1].price;

                } else {
                    return tiers[tiers.length - 1].price * sValue;
                }
            } else {
                if ((sValue >= tiers[i].value) && (sValue < tiers[i + 1].value)) {
                    if (tiers[i].free > 0) {

                        var val = sValue - tiers[i].free;

                        if (val < 0) {
                            val = 0;
                        }

                        return val * tiers[i].price;

                    } else {
                        return sValue * tiers[i].price;
                    }
                }
            }
        }
    };

    self.setPrice = function () {

        var currentCurrency = '',
            originalCurrency = '',
            currency = $(self.element).find('.current-switcher').val();

        $.each(self.currencies, function (index) {
            if (currency === this.code) {
                currentCurrency = this.rate.USD;
            }
            if (self.hosterCurrency === this.code) {
                originalCurrency = this.rate.USD;
            }
        });

        var minBalancerPrice = self.checkPrice('balancer'),
            minAppserverPrice = self.checkPrice('appserver'),
            minDatabasePrice = self.checkPrice('database'),

            maxBalancerPrice = self.checkMaxPrice('balancer'),
            maxAppserverPrice = self.checkMaxPrice('appserver'),
            maxDatabasePrice = self.checkMaxPrice('database'),

            storagePrice = self.checkStoragePrice(),
            ipPrice = self.checkIpPrice(),
            trafficPrice = self.checkTrafficPrice();

        // TRAFFIC
        trafficPrice = self.toCurrency(trafficPrice, originalCurrency, currentCurrency);
        if (self.period === 'hourly') {
            trafficPrice = trafficPrice / 730;
        }


        // MIN PRICE
        var minPrice = minBalancerPrice + minAppserverPrice + minDatabasePrice;


        minPrice = minPrice + storagePrice + ipPrice;

        minPrice = self.toCurrency(minPrice, originalCurrency, currentCurrency);

        minPrice = self.changePricePeriod(minPrice);
        minPrice = +minPrice + +trafficPrice;
        switch (self.period) {
            case 'hourly':
                minPrice = Math.round(minPrice * 1000) / 1000;
                break;
            case 'monthly':
                minPrice = (minPrice).toFixed(2);
                break
        }

        $(self.element).find('.start-price .price').html(minPrice);

        // MAX PRICE
        var maxPrice = maxBalancerPrice + maxAppserverPrice + maxDatabasePrice;
        maxPrice = maxPrice + storagePrice + ipPrice;
        maxPrice = self.toCurrency(maxPrice, originalCurrency, currentCurrency);
        maxPrice = self.changePricePeriod(maxPrice);
        maxPrice = +maxPrice + +trafficPrice;
        if (+maxPrice < +minPrice) {
            maxPrice = minPrice;
        }
        switch (self.period) {
            case 'hourly':
                maxPrice = Math.round(maxPrice * 1000) / 1000;
                break;
            case 'monthly':
                maxPrice = parseFloat(maxPrice).toFixed(2);
                break
        }
        $(self.element).find('.max-price .price').html(maxPrice);


        // RESERVED COUNTS
        var reservedBalancerCloudlets = self.cloudlets.balancer.reserved * self.cloudlets.balancer.nodes,
            reservedAppServerCloudlets = self.cloudlets.appserver.reserved * self.cloudlets.appserver.nodes,
            reservedDbCloudlets = self.cloudlets.database.reserved * self.cloudlets.database.nodes,
            reservedCloudletsMib = self.convertMib(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets),
            reservedCloudletsGHz = self.convertMhz(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets);

        $(self.element).find('.reserved-totals .gibs').html(reservedCloudletsMib);
        $(self.element).find('.reserved-totals .ghz').html(reservedCloudletsGHz);
        $(self.element).find('.reserved-totals .balancer').html(reservedBalancerCloudlets);
        $(self.element).find('.reserved-totals .appserver').html(reservedAppServerCloudlets);
        $(self.element).find('.reserved-totals .database').html(reservedDbCloudlets);
        $(self.element).find('.reserved-totals .cloudlets-total').html(+reservedBalancerCloudlets + +reservedAppServerCloudlets + +reservedDbCloudlets);

        var charsLength = reservedBalancerCloudlets + '' + reservedAppServerCloudlets + '' + reservedDbCloudlets;
        if (charsLength.length >= 8) {
            $(self.element).find('.calculator-right').addClass('new-row');
        } else {
            $(self.element).find('.calculator-right').removeClass('new-row');
        }

        // SCALING COUNTS
        var scalingBalancerCloudlets = self.cloudlets.balancer.scaling * self.cloudlets.balancer.nodes,
            scalingAppServerCloudlets = self.cloudlets.appserver.scaling * self.cloudlets.appserver.nodes,
            scalingDbCloudlets = self.cloudlets.database.scaling * self.cloudlets.database.nodes,
            scalingCloudletsMib = self.convertMib(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets),
            scalingCloudletsGHz = self.convertMhz(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets);

        $(self.element).find('.scaling-totals .gibs').html(scalingCloudletsMib);
        $(self.element).find('.scaling-totals .ghz').html(scalingCloudletsGHz);
        $(self.element).find('.scaling-totals .balancer').html(scalingBalancerCloudlets);
        $(self.element).find('.scaling-totals .appserver').html(scalingAppServerCloudlets);
        $(self.element).find('.scaling-totals .database').html(scalingDbCloudlets);
        $(self.element).find('.scaling-totals .cloudlets-total').html(+scalingBalancerCloudlets + +scalingAppServerCloudlets + +scalingDbCloudlets);

        charsLength = scalingBalancerCloudlets + '' + scalingAppServerCloudlets + '' + scalingDbCloudlets;
        if (!$(self.element).find('.calculator-right').hasClass('new-row')) {
            if (charsLength.length >= 8) {
                $(self.element).find('.calculator-right').addClass('new-row');
            } else {
                $(self.element).find('.calculator-right').removeClass('new-row');
            }
        }
    };

    self.checkPrice = function (type) {

        var cloudlets = self.cloudlets[type].reserved * self.cloudlets[type].nodes,
            tiers = self.fixed.tiers;

        if (cloudlets < 1) {
            return 0;
        }

        for (var i = 0; i < tiers.length; i++) {
            var freeCloudlets = 0;
            if (i !== tiers.length - 1) {
                if ((cloudlets >= tiers[i].value) && (cloudlets < tiers[i + 1].value)) {
                    freeCloudlets = cloudlets - tiers[i].value;
                    if (freeCloudlets <= tiers[i].free) {
                        return tiers[i].price * tiers[i].value;
                    } else {
                        return cloudlets * tiers[i].price;
                    }
                }
            } else {
                freeCloudlets = cloudlets - tiers[tiers.length - 1].value;
                if (freeCloudlets <= tiers[tiers.length - 1].free) {
                    return tiers[tiers.length - 1].price * tiers[tiers.length - 1].value;
                } else {
                    return tiers[tiers.length - 1].price * cloudlets;
                }
            }
        }
    };

    self.checkMaxPrice = function (type) {

        var cloudlets = self.cloudlets[type].scaling * self.cloudlets[type].nodes,
            minCloudlets = self.cloudlets[type].reserved * self.cloudlets[type].nodes,
            tiers = self.dynamic.tiers;

        if (cloudlets === 0) {
            return 0;
        }

        var reservedPrice = this.checkPrice(type),
            scalingCloudlets = cloudlets - minCloudlets;

        for (var i = 0; i < tiers.length; i++) {
            if (i !== tiers.length - 1) {
                if ((cloudlets >= tiers[i].value) && (cloudlets < tiers[i + 1].value)) {
                    if (scalingCloudlets <= tiers[i].free) {
                        return reservedPrice;
                    } else {
                        return (scalingCloudlets * tiers[i].price) + reservedPrice;
                    }
                }
            } else {
                if (scalingCloudlets <= tiers[tiers.length - 1].free) {
                    return reservedPrice;
                } else {
                    return (tiers[tiers.length - 1].price * scalingCloudlets) + reservedPrice;
                }
            }
        }
    };

    self.toCurrency = function (nValue, sFrom, sTo) {
        return (sFrom / sTo) * nValue;
    };

    self.setMinValues = function (type) {

        var value = self.cloudlets[type].reserved;

        // render line from dot to range
        var leftRange = $(self.element).find('.' + type + '-range .addui-slider-handle').eq(0),
            leftDot = $(self.element).find('.' + type + '-range .reserved .dot');
        var distance = leftRange.offset().left - $(leftDot).offset().left + $(leftDot).outerWidth() + 10;
        if (distance > 0) {
            $(leftDot).html('<span class="line more" style="width:' + (distance + 2) + 'px"></span>');
        } else {
            $(leftDot).html('<span class="line less" style="width:' + Math.abs(distance) + 'px"></span>');
        }

        // change reserved cloudlets
        var mib = self.convertMib(value);
        var mhz = self.convertMhz(value);
        $(self.element).find('.' + type + '-range .min-block .digits').html('<span>' + mib + '</span><span>' + mhz + '</span>')

    };

    self.setMaxValues = function (type) {

        var value = self.cloudlets[type].scaling;

        // render line from dot to range
        var rightRange = $(self.element).find('.' + type + '-range .addui-slider-handle').eq(1),
            rightDot = $(self.element).find('.' + type + '-range .sl .dot');
        var distance = rightRange.offset().left - $(rightDot).offset().left + $(rightDot).outerWidth() + 10;
        if (distance > 0) {
            $(rightDot).html('<span class="line more" style="width:' + (distance + 2) + 'px"></span>');
        } else {
            $(rightDot).html('<span class="line less" style="width:' + Math.abs(distance) + 'px"></span>');
        }

        // change scaling limits
        var mib = self.convertMib(value);
        var mhz = self.convertMhz(value);
        $(self.element).find('.' + type + '-range .max-block .digits').html('<span>' + mib + '</span><span>' + mhz + '</span>')
    };

    self.decreaseReserved = function (oSlider) {
        var l = oSlider.value.split(',')[0];
        var r = oSlider.value.split(',')[1];
        if (l > oSlider._settings.min) {
            l--;
            oSlider.value = '' + l + ',' + r + '';
        }
    };

    self.increaseReserved = function (oSlider) {
        var l = oSlider.value.split(',')[0];
        var r = oSlider.value.split(',')[1];
        if (l < oSlider._settings.max) {
            if (l === r) {
                r++;
            }
            l++;
            oSlider.value = '' + l + ',' + r + '';
        }
    };

    self.decreaseScaling = function (oSlider) {
        var l = oSlider.value.split(',')[0];
        var r = oSlider.value.split(',')[1];
        if (r > oSlider._settings.min) {
            if (l === r) {
                l--;
            }
            r--;

            oSlider.value = '' + l + ',' + r + '';
        }
    };

    self.increaseScaling = function (oSlider) {
        var l = oSlider.value.split(',')[0];
        var r = oSlider.value.split(',')[1];
        if (r < oSlider._settings.max) {
            r++;
            oSlider.value = '' + l + ',' + r + '';
        }
    };

    self.Slider = function (el, settings) {

        var $el = $(el);
        var s = {};
        if ($el.attr("name"))
            s.name = $el.attr("name");
        if ($el.attr("class"))
            s.class = $el.attr("class");
        if ($el.attr("id"))
            s.id = $el.attr("id");
        if ($el.attr("value"))
            s.value = $el.attr("value");
        if ($el.attr("min"))
            s.min = $el.attr("min");
        if ($el.attr("max"))
            s.max = $el.attr("max");
        if ($el.attr("step"))
            s.step = $el.attr("step");

        s.storage = self.storage;
        s.ip = self.ip;

        s.fixed = self.fixed;
        s.dynamic = self.dynamic;
        s.network = self.network;

        s.calculator = self;

        settings = $.extend(s, $el.data(), settings);

        var S = new $add.SliderObj(settings);
        S.render($el, "replace");
        return S;
    };

    self.onlyUnique = function (value, index, self) {
        return self.indexOf(value) === index;
    };

    self.renderHosterSelector = function () {

        sHtml = new EJS({url: '/j-calculator/templates/j-hoster-selector'}).render({
            localization: self.localization,
            defHoster: self.sCurrentHoster,
            hosters: self.oHosters
        });

        for (var i = 0, oHoster; oHoster = self.oHosters[i]; i++) {
            if (self.sCurrentHoster === oHoster.keyword) {
                self.sKey = oHoster.key;
                self.sCurrentHoster = oHoster.keyword;
                $(self.element).attr('data-custom-signup', oHoster.customSignUp);
            }
        }

        if ($(self.element).find('.hoster-selector').length > 0) {
            $(self.element).find('.hoster-selector').replaceWith(sHtml);
        } else {
            $(self.element).append(sHtml);
        }
        $(self.element).find('.hoster-selector--select').each(function () {
            var $this = $(this), numberOfOptions = $(this).children('option').length;
            $this.addClass('select-hidden');
            $this.wrap('<div class="select"></div>');
            $this.after('<div class="select-styled"></div>');
            var $styledSelect = $this.next('div.select-styled');
            $styledSelect.text($this.children('option:selected').text());
            var $list = $('<ul />', {
                'class': 'select-options'
            }).insertAfter($styledSelect);
            for (var i = 0; i < numberOfOptions; i++) {
                var classes = '';
                if ($this.children('option').eq(i).text() === $this.children('option:selected').text()) {
                    classes = 'current-hoster';
                }
                var li = $('<li />', {
                    text: $this.children('option').eq(i).text(),
                    rel: $this.children('option').eq(i).val(),
                    class: classes
                }).appendTo($list);
                var li_flags = $('<span />', {
                    class: 'flags',
                }).appendTo(li);
                var loc = $this.children('option').eq(i).attr('data-location').split(',').filter(self.onlyUnique);
                $.each(loc, function (index, code) {
                    $('<i />', {
                        class: 'flag flag-' + code,
                        text: code
                    }).appendTo(li_flags);
                })
            }
            var $listItems = $list.children('li');
            $styledSelect.click(function (e) {
                e.stopPropagation();
                $('div.select-styled.active').not(this).each(function () {
                    $(this).removeClass('active').next('ul.select-options').hide();
                });
                $(this).toggleClass('active').next('ul.select-options').toggle();
            });
            $listItems.click(function (e) {
                e.stopPropagation();
                $styledSelect.text($(this).text()).removeClass('active');

                self.sCurrentHoster = $(this).attr('rel');
                self.renderHosterSelector();
                self.renderCalculator();

                $list.hide();
            });
            $(document).click(function () {
                $styledSelect.removeClass('active');
                $list.hide();
            });
        });
    };


    self.renderCalculator = function () {

        var tariffPlans = self.pricing[self.sKey].tariffPlans;

        if (tariffPlans.length > 0) {
            $.each(tariffPlans, function () {
                if (this.type.toLowerCase() === 'fixed') {
                    self.fixed = this;
                }
                if (this.type.toLowerCase() === 'flexible') {
                    self.dynamic = this;
                }
                if (this.type.toLowerCase() === 'network') {
                    self.network = this;
                }
                if (this.type.toLowerCase() === 'storage') {
                    self.storage = this;
                }
                if (this.keyword.toLowerCase() === 'ip') {
                    self.ip = this;
                }
            });
        }

        var sHtml = new EJS({url: '/j-calculator/templates/j-calculator'}).render({
            localization: self.localization,
            oLanguages: self.oLanguages,
            id: Math.round(Math.random() * 100000000),
            currencies: self.currencies,
            startCurrency: self.startCurrency,
            period: self.period,
            cloudlets: self.cloudlets
        });

        if ($(self.element).find('.calculator-wrapper').length > 0) {
            $(self.element).find('.calculator-wrapper').replaceWith(sHtml);
        } else {
            $(self.element).append(sHtml);
        }

        $(self.element).attr('data-mode', 'appserver');

        for (var i = 0, oHoster; oHoster = self.oHosters[i]; i++) {
            if (self.sKey === oHoster.key) {
                self.hosterCurrency = oHoster.currencyCode;
            }
        }

        $(self.element).find('.current-switcher').each(function () {

            var $this = $(this), numberOfOptions = $(this).children('option').length;

            $this.addClass('select-hidden');
            $this.wrap('<div class="select"></div>');
            $this.after('<div class="select-styled"></div>');

            var $styledSelect = $this.next('div.select-styled');
            $styledSelect.html($this.children('option:selected').attr('data-sign') + ' - ' + $this.children('option:selected').html());

            var $list = $('<ul />', {
                'class': 'select-options'
            }).insertAfter($styledSelect);

            for (var i = 0; i < numberOfOptions; i++) {

                var classes = '';
                if ($this.children('option').eq(i).text() === $this.children('option:selected').text()) {
                    classes = 'current-currency';
                }

                var li = $('<li />', {
                    text: $this.children('option').eq(i).html(),
                    rel: $this.children('option').eq(i).val(),
                    class: classes
                }).appendTo($list);

                $('<span />', {
                    class: 'currency-sign',
                    text: $this.children('option').eq(i).attr('data-sign') + ' - '
                }).prependTo(li);

                $('<span />', {
                    class: 'currency-name',
                    text: $this.children('option').eq(i).attr('data-name')
                }).appendTo(li);

            }

            var $listItems = $list.children('li');

            $styledSelect.click(function (e) {
                e.stopPropagation();
                $('div.select-styled.active').not(this).each(function () {
                    $(this).removeClass('active').next('ul.select-options').hide();
                });
                $(this).toggleClass('active').next('ul.select-options').toggle();
            });

            $listItems.click(function (e) {
                $list.find('.current-currency').removeClass('current-currency');
                $(this).addClass('current-currency');
                e.stopPropagation();
                $styledSelect.html($(this).html()).removeClass('active');
                $this.val($(this).attr('rel')).change();
                $list.hide();
            });

            $(document).click(function () {
                $styledSelect.removeClass('active');
                $list.hide();
            });

        });

        var sliders = {
            'appserver': self.Slider($(self.element).find('.appserver-range input'), ''),
            'balancer': self.Slider($(self.element).find('.balancer-range input'), ''),
            'database': self.Slider($(self.element).find('.database-range input'), ''),
        };


        $(self.element).find('input[name*="mode"]').click(function (e) {
            self.element.setAttribute('data-mode', this.value);
            self.setMinValues(self.element.getAttribute('data-mode'));
            self.setMaxValues(self.element.getAttribute('data-mode'));
        });
        $(self.element).find('input[name*="mode"][value=appserver]').click();
        $(self.element).find('.min-block-decrease').click(function (e) {
            e.preventDefault();
            var slider = sliders[self.element.getAttribute('data-mode')];
            self.decreaseReserved(slider);
        });
        $(self.element).find('.min-block-increase').click(function (e) {
            e.preventDefault();
            var slider = sliders[self.element.getAttribute('data-mode')];
            self.increaseReserved(slider);
        });
        $(self.element).find('.max-block-decrease').click(function (e) {
            e.preventDefault();
            var slider = sliders[self.element.getAttribute('data-mode')];
            self.decreaseScaling(slider);
        });
        $(self.element).find('.max-block-increase').click(function (e) {
            e.preventDefault();
            var slider = sliders[self.element.getAttribute('data-mode')];
            self.increaseScaling(slider);
        });


        $(self.element).find('.node-count input').change(function (e) {
            var digit = $(this),
                type = digit.attr('name');

            if (+this.value !== 0) {
                self.cloudlets[type].nodes = +this.value;
            }

            if (parseInt(digit.val()) > parseInt(digit.attr('max'))) {
                digit.val(digit.attr('max')).change();
            }

            if (parseInt(digit.val()) < 0 || digit.val() === '') {
                digit.val(0).change();
            }

            self.setPrice();
        });

        $(self.element).find('.digit').change(function (e) {
            var digit = $(this),
                type = digit.attr('name');

            self.cloudlets[type] = +this.value;

            if (parseInt(digit.val()) > parseInt(digit.attr('max'))) {
                digit.val(digit.attr('max')).change();
            }

            if (parseInt(digit.val()) < 0 || digit.val() === '') {
                digit.val(0).change();
            }

            self.setPrice();
        });


        $(self.element).find('.plus').click(function (e) {
            e.preventDefault();
            var digit = $(this).closest('.inner').find('.digit');
            digit.val(parseInt(digit.val()) + 1).change();
        });
        $(self.element).find('.minus').click(function (e) {
            e.preventDefault();
            var digit = $(this).closest('.inner').find('.digit');
            if (parseInt(digit.val()) > 0) {
                digit.val(parseInt(digit.val()) - 1).change();
            }
        });
        $(self.element).find('.plus-node').click(function (e) {
            e.preventDefault();

            var digit = $(this).closest('.node-count').find('input');
            digit.val(parseInt(digit.val()) + 1).change();

        });
        $(self.element).find('.minus-node').click(function (e) {
            e.preventDefault();

            var digit = $(this).closest('.node-count').find('input');
            if (parseInt(digit.val()) > 0) {
                digit.val(parseInt(digit.val()) - 1).change();
            }

        });
        $(self.element).find('.calculator-right input').click(function (e) {
            self.period = $(this).val();
            self.setPrice();
        });
        $(self.element).find('.current-switcher').change(function (e) {
            self.setPrice();
        });

        $('.j-calculator').removeClass('loading');

    };

    self.getAllData = function () {

        var sHosterCriteria = JApp.utils.uniqid();

        // load all hosters
        if (JApp.isLoadedHosters()) {
            self.oHosters = JApp.getHosters();
        } else {
            JApp.loadHosters(function (response) {
                self.oHosters = response;
            });
        }

        // init default user hoster
        if (JApp.isLoadedDefHoster()) {
            self.sCurrentHoster = JApp.getDefaultHoster();
        } else {
            JApp.loadDefaultHoster(function (response) {
                self.sCurrentHoster = response;
            }, sHosterCriteria);
        }

        // load all pricing models
        if (JApp.pricing.isLoadedPricing()) {
            self.pricing = JApp.pricing.getPricing();
        } else {
            JApp.pricing.loadPricings(function (response) {
                self.pricing = response;
            });
        }

        // init hoster keyword
        $.each(self.oHosters, function (index, hoster) {
            if (hoster.keyword === self.sCurrentHoster) {
                self.sKey = hoster.key;
                return false;
            }
        });

        self.renderHosterSelector();
        self.renderCalculator();

    };

    self.getHosterData = function () {
        $.ajax({
            type: "GET",
            url: 'https://' + self.sKey + '/auth/GetDefaultPricingModels',
            dataType: "json",
            success: function (hosterPricingJSON) {
                if (hosterPricingJSON.result === 0 && hosterPricingJSON.response.models[0]) {
                    self.pricing[self.sKey] = hosterPricingJSON.response.models[0];
                    $.ajax({
                        type: "GET",
                        url: 'https://' + self.sKey + '/settings/GetHosterSettings',
                        dataType: "json",
                        success: function (hosterSettingsJSON) {
                            if (hosterSettingsJSON.result === 0 && hosterSettingsJSON.response.settingsCurrencyCode) {
                                self.hosterCurrency = hosterSettingsJSON.response.settingsCurrencyCode;
                                self.renderCalculator();
                            } else {
                                throw new Error('Can not get hoster default currency');
                            }
                        },
                        error: function (response) {
                            throw new Error(response);
                        }
                    });
                } else {
                    throw new Error('Can not get hoster pricing model');
                }
            },
            error: function (response) {
                throw new Error(response);
            }
        });
    };


    if (self.element) {

        // load currencies dependencies
        if (JApp.pricing.isLoadedCurrencies()) {
            self.currencies = JApp.pricing.getCurrecies();
        } else {
            JApp.pricing.loadCurrencies(function (response) {
                self.currencies = response;
            })
        }

        // programming languages
        self.oLanguages = $(self.element).data('languages') || ['java', 'php', 'node', 'python', 'go', 'ruby'];
        if (!Array.isArray(self.oLanguages)) {
            self.oLanguages = self.oLanguages.split(",").map(function (item) {
                return item.trim();
            });
        }

        // start period
        self.period = $(self.element).attr('data-period') || 'hourly';

        // start currency
        self.startCurrency = $(self.element).attr('data-start-currency') || 'USD';

        // load hoster/hosters data
        if (self.sKey) {
            self.getHosterData();
        } else {
            self.getAllData();
        }

    } else {
        throw new Error('Ooops! Something was wrong!');
    }

};

jQuery(document).ready(function ($) {


    var $jelasticCalculators = $('.j-calculator'),
        ojelasticCalculators = [];

    $jelasticCalculators.addClass('loading');

    if ($jelasticCalculators.length > 0) {
        $.each($jelasticCalculators, function (index) {
            var oAtts = {
                oElement: this
            };
            if ($(this).attr('data-key')) {
                oAtts['sKey'] = $(this).attr('data-key');
            }
            ojelasticCalculators[index] = new JApp.pricing.Calculator(oAtts);
        });
    }

    $(window).resize(function () {
        $(ojelasticCalculators).each(function () {
            this.setMinValues($(this.element).attr('data-mode'));
            this.setMaxValues($(this.element).attr('data-mode'));
        });
    });

});



if ($add === undefined) var $add = {version: {}, auto: {disabled: false}};
$add.version.Slider = "2.0.1";
$add.SliderObj = function (settings) {
    Obj.apply(this);

    function toNearest(num, x) {
        return (Math.round(num * (1 / x)) / (1 / x));
    }

    function betterParseFloat(t) {
        return isNaN(parseFloat(t)) && t.length > 0 ? betterParseFloat(t.substr(1)) : parseFloat(t)
    }

    this._settings = {
        direction: "horizontal",
        min: 0,
        max: 100,
        step: 0.1,
        value: 50,
        formatter: function (x) {
            if ((this._settings.step + "").indexOf(".") > -1)
                var digits = (this._settings.step + "").split(".").pop().length;
            else
                var digits = 0;
            var v = betterParseFloat(x);
            if (x < 0) {
                var neg = true;
                x = 0 - x;
            } else {
                var neg = false;
            }
            if (isNaN(x)) {
                return "NaN";
            }
            var whole = Math.floor(x);
            var dec = (x - whole);
            dec = Math.round(dec * Math.pow(10, digits));
            dec = dec + "";
            while (dec.length < digits) {
                dec = "0" + dec;
            }
            return ((neg) ? "-" : "") + whole + ((digits > 0) ? "." + dec : "");
        },
        timeout: 2000,
        range: false,
        id: false,
        name: "",
        class: "",
        fixed: "",
        dynamic: "",
        calculator: ""
    };

    Object.defineProperty(this, "settings", {
        get: function () {
            this.trigger("getsetting settings", this._settings);
            return this._settings;
        },
        set: function (newSettings) {
            this._settings = $.extend(this._settings, settings);
            this.trigger("setsettings settings", this._settings);
            this.refresh();
        }
    });
    Object.defineProperty(this, "value", {
        get: function () {
            this.trigger("getvalue value", this._settings.value);
            return this._settings.value;
        },
        set: function (newVal) {

            var self = this;


            this._settings.value = newVal;

            this._elements.find(".addui-slider-input").val(this._settings.value);
            if (!this._settings.range) {
                var offset = betterParseFloat(this._settings.value) - this._settings.min;
                var per = (toNearest(offset, this._settings.step) / (this._settings.max - this._settings.min)) * 100;
                if (this._settings.direction == "vertical") {
                    this._elements.find(".addui-slider-handle").css("bottom", per + "%");
                    this._elements.find(".addui-slider-range").css("height", per + "%");
                    this._elements.find(".addui-slider-range").css("bottom", "0%");
                } else {
                    this._elements.find(".addui-slider-handle").css("left", per + "%");
                    this._elements.find(".addui-slider-range").css("width", per + "%");
                }
                this._elements.find(".addui-slider-value span").html(toFunc(this._settings.formatter).call(this, this._settings.value));
            } else {

                var l = (toNearest(parseFloat(this._settings.value.split(",")[0]), this._settings.step));
                var h = (toNearest(parseFloat(this._settings.value.split(",")[1]), this._settings.step));
                var range = this._settings.max - this._settings.min;
                var offsetL = l - this._settings.min;
                var offsetH = h - this._settings.min;
                var lPer = (offsetL / range) * 100;
                var hPer = (offsetH / range) * 100;

                this._elements.each(function (i, el) {
                    var $el = $(el),
                        type = $($el.closest('[class*="-range"'))[0].className.replace('-range', '');

                    if (self._settings.direction == "vertical") {
                        $el.find(".addui-slider-handle").eq(0).css("bottom", lPer + "%");
                        $el.find(".addui-slider-handle").eq(1).css("bottom", hPer + "%");
                        $el.find(".addui-slider-range").css("bottom", lPer + "%").css("height", (hPer - lPer) + "%");
                    } else {
                        $el.find(".addui-slider-start-distance").css("width", "calc(" + lPer + "% + 30px)");
                        $el.find(".addui-slider-handle").eq(0).css("left", lPer + "%");
                        $el.find(".addui-slider-handle").eq(1).css("left", hPer + "%");
                        $el.find(".addui-slider-range").css("left", lPer + "%").css("width", (hPer - lPer) + "%");
                        $el.find(".addui-slider-distance").css("width", "calc(" + (100 - hPer) + "% + 31px)");
                    }

                    var cloudlets = $(self._settings.calculator.element).attr('data-cloudlets-tx') || 'cloudlets';

                    $('.' + type + '-range .reserved-cloudlets').html(toFunc(self._settings.formatter).call(self, l) + ' ' + cloudlets);
                    $('.' + type + '-range .scaling-cloudlets').html(toFunc(self._settings.formatter).call(self, h) + ' ' + cloudlets);

                    self._settings.calculator.setReservedCloudlets(l, type);
                    self._settings.calculator.setScalingCloudlets(h, type);
                    self._settings.calculator.setPrice();
                });
            }
        }
    });

    this.renderer = function () {
        var self = this;
        var $slider = $("<div class='addui-slider addui-slider-" + this._settings.direction + ((this._settings.range) ? " addui-slider-isrange" : "") + " " + this._settings.class + "' " + ((this._settings.id) ? "id='" + this._settings.id + "'" : "") + "></div>");
        var $input = $("<input class='addui-slider-input' type='hidden' name='" + this._settings.name + "' value='" + this._settings.value + "' />").appendTo($slider);
        var $track = $("<div class='addui-slider-track'></div>").appendTo($slider);
        var $range = $("<div class='addui-slider-range'></div>").appendTo($track);

        if (!this._settings.range) {
            var $handle = $("<div class='addui-slider-handle'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
            var activeTimer = null;

            function dragHandler(e) {
                e.preventDefault();
                if (self._settings.direction == "vertical") {
                    if (e.type == "touchmove")
                        var y = e.originalEvent.changedTouches[0].pageY;
                    else
                        var y = e.pageY;
                    var sliderY = $slider.offset().top + $slider.height();
                    var offsetY = sliderY - y;
                    var offsetPer = (offsetY / $slider.height()) * 100;
                } else {
                    if (e.type == "touchmove")
                        var x = e.originalEvent.changedTouches[0].pageX;
                    else
                        var x = e.pageX;
                    var sliderX = $slider.offset().left;
                    var offsetX = x - sliderX;
                    var offsetPer = (offsetX / $slider.width()) * 100;
                }

                var val = toNearest((offsetPer / 100) * (self._settings.max - self._settings.min), self._settings.step) + self._settings.min;
                val = Math.min(self._settings.max, Math.max(self._settings.min, val));
                self.value = toNearest(val, self._settings.step);

            };

            function dragStopHandler(e) {
                $(window).off("mousemove touchmove", dragHandler);
                activeTimer = setTimeout(function () {
                    $handle.removeClass("addui-slider-handle-active");
                }, self._settings.timeout);
            };
            $handle.on("mousedown touchstart", function (e) {
                clearTimeout(activeTimer);
                $handle.addClass("addui-slider-handle-active");
                $(window).on("mousemove touchmove dragmove", dragHandler);
                $(window).one("mouseup touchend", dragStopHandler);
            });
            $slider.on("click", function (e) {
                e.preventDefault();

                if (self._settings.direction == "vertical") {
                    if (e.type == "touchmove")
                        var y = e.originalEvent.changedTouches[0].pageY;
                    else
                        var y = e.pageY;
                    var sliderY = $slider.offset().top + $slider.height();
                    var offsetY = sliderY - y;
                    var offsetPer = (offsetY / $slider.height()) * 100;
                } else {
                    if (e.type == "touchmove")
                        var x = e.originalEvent.changedTouches[0].pageX;
                    else
                        var x = e.pageX;
                    var sliderX = $slider.offset().left;
                    var offsetX = x - sliderX;
                    var offsetPer = (offsetX / $slider.width()) * 100;
                }

                var val = toNearest((offsetPer / 100) * (self._settings.max - self._settings.min), self._settings.step) + self._settings.min;
                val = Math.min(self._settings.max, Math.max(self._settings.min, val));
                clearTimeout(activeTimer);
                $handle.addClass("addui-slider-handle-active");
                activeTimer = setTimeout(function () {
                    $handle.removeClass("addui-slider-handle-active");
                }, self._settings.timeout);
                self.value = val;
            });
        } else {
            var $startDistance = $("<div class='addui-slider-start-distance'></div>").appendTo($track);
            var $handle1 = $("<div class='addui-slider-handle addui-slider-handle-l'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
            var activeTimer1 = null;


            function dragHandler1(e) {
                e.preventDefault();
                if (self._settings.direction == "vertical") {
                    if (e.type == "touchmove")
                        var y = e.originalEvent.changedTouches[0].pageY;
                    else
                        var y = e.pageY;
                    var sliderY = $slider.offset().top + $slider.height();
                    var offsetY = sliderY - y;
                    var range = self._settings.max - self._settings.min;
                    var offsetPer = (offsetY / $slider.height()) * 100;
                } else {
                    if (e.type == "touchmove")
                        var x = e.originalEvent.changedTouches[0].pageX;
                    else
                        var x = e.pageX;
                    var sliderX = $slider.offset().left;
                    var offsetX = x - sliderX;
                    var range = self._settings.max - self._settings.min;
                    var offsetPer = (offsetX / $slider.width()) * 100;
                }


                var offsetVal = offsetPer / 100 * range;
                var val = toNearest(offsetVal + self._settings.min, self._settings.step);
                val = Math.min(self._settings.max, Math.max(self._settings.min, val));
                var higherVal = toNearest(betterParseFloat(self._settings.value.split(',')[1]), self._settings.step);
                if (higherVal < val)
                    higherVal = val;
                self.value = val + "," + higherVal;
            };


            function dragStopHandler1(e) {
                $(window).off("mousemove touchmove", dragHandler1);
                activeTimer1 = setTimeout(function () {
                    $handle1.removeClass("addui-slider-handle-active");
                }, self._settings.timeout);
            };
            $handle1.on("mousedown touchstart", function (e) {
                clearTimeout(activeTimer1);
                $handle1.addClass("addui-slider-handle-active");
                $(window).on("mousemove touchmove dragmove", dragHandler1);
                $(window).one("mouseup touchend", dragStopHandler1);
            });

            var $handle2 = $("<div class='addui-slider-handle addui-slider-handle-h'><div class='addui-slider-value'><span></span></div></div>").appendTo($track);
            var activeTimer2 = null;

            var $distance = $("<div class='addui-slider-distance'></div>").appendTo($track);


            function dragHandler2(e) {
                e.preventDefault();
                if (self._settings.direction == "vertical") {
                    if (e.type == "touchmove")
                        var y = e.originalEvent.changedTouches[0].pageY;
                    else
                        var y = e.pageY;
                    var sliderY = $slider.offset().top + $slider.height();
                    var offsetY = sliderY - y;
                    var offsetPer = (offsetY / $slider.height()) * 100;
                } else {
                    if (e.type == "touchmove")
                        var x = e.originalEvent.changedTouches[0].pageX;
                    else
                        var x = e.pageX;
                    var sliderX = $slider.offset().left;
                    var offsetX = x - sliderX;
                    var offsetPer = (offsetX / $slider.width()) * 100;
                }
                var range = self._settings.max - self._settings.min;
                var offsetVal = offsetPer / 100 * range;
                var val = toNearest(offsetVal + self._settings.min, self._settings.step);
                val = Math.min(self._settings.max, Math.max(self._settings.min, val));
                var lowerVal = toNearest(betterParseFloat(self._settings.value.split(',')[0]), self._settings.step);
                if (lowerVal > val)
                    lowerVal = val;
                self.value = lowerVal + "," + val;
            };


            function dragStopHandler2(e) {
                $(window).off("mousemove touchmove", dragHandler2);
                activeTimer2 = setTimeout(function () {
                    $handle2.removeClass("addui-slider-handle-active");
                }, self._settings.timeout);
            };
            $handle2.on("mousedown touchstart", function (e) {
                clearTimeout(activeTimer2);
                $handle2.addClass("addui-slider-handle-active");
                $(window).on("mousemove touchmove dragmove", dragHandler2);
                $(window).one("mouseup touchend", dragStopHandler2);
            });
        }
        return $slider;
    };

    this.init = function (settings) {
        var self = this;
        this.settings = settings;

        if (!this._settings.range) {
            this._settings.value = Math.max(this._settings.min, Math.min(this._settings.max, betterParseFloat(this._settings.value)));
        } else {
            var val = this._settings.value + "";
            if (val.indexOf(",") > -1) { // Already has two values
                var values = val.split(",");
                var v1 = betterParseFloat(values[0]);
                v1 = Math.min(this._settings.max, Math.max(this._settings.min, v1));
                v1 = toNearest(v1, this._settings.step);

                var v2 = betterParseFloat(values[1]);
                v2 = Math.min(this._settings.max, Math.max(this._settings.min, v2));
                v2 = toNearest(v2, this._settings.step);
            } else { // Only has one value
                var val = toNearest(Math.max(this._settings.min, Math.min(this._settings.max, betterParseFloat(this._settings.value))), this._settings.step);
                var middle = (this._settings.max - this._settings.min) / 2;
                if (val < middle) {
                    var v1 = val;
                    var v2 = this._settings.max - val;
                } else {
                    var v2 = val;
                    var v1 = this._settings.min + val;
                }
            }
            if (v1 < v2)
                this._settings.value = v1 + "," + v2;
            else
                this._settings.value = v2 + "," + v1;
        }

        this.on("render", function () {
            self.value = self._settings.value;
        })
        this.trigger("init", {
            settings: this._settings
        });
    };
    this.init.apply(this, arguments);
};